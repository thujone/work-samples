using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using NGRM.Domain.Interfaces.Repositories;
using NGRM.Domain.Entities;

namespace NGRM.Infrastructure.Repositories
{
    public class HostVulnerabilityRepository : BaseRepository<HostVulnerabilityEntity, int>, IHostVulnerabilityRepository
    {
        public HostVulnerabilityRepository(CSPortalContext context) : base(context)
        {
        }

        protected override IEnumerable<HostVulnerabilityEntity> GetEntities()
        {
            return Context.HostVulnerabilities
                .Include(x => x.Vulnerability)
                .Include(x => x.Host)
                .Include(x => x.Phase)
                .Include(x => x.Import);
        }

        protected override HostVulnerabilityEntity GetEntity(int id)
        {
            return Context.HostVulnerabilities
                .Include(x => x.Vulnerability)
                .Include(x => x.Host)
                .Include(x => x.Phase)
                .Include(x => x.Import)
                .FirstOrDefault(x => x.Id == id);
        }

        public IEnumerable<HostVulnerabilityEntity> GetByEngagementId(int engagementId)
        {
            return Context.HostVulnerabilities
                .Include(x => x.Vulnerability)
                .Include(x => x.Host)
                .Include(x => x.Phase)
                .Include(x => x.Import)
                .Where(x => x.EngagementId == engagementId);
        }

        public IEnumerable<HostVulnerabilityEntity> GetByImportAndPhase(int importId, int phaseId)
        {
            return Context.HostVulnerabilities
                .Include(x => x.Vulnerability)
                .Include(x => x.Host)
                .Include(x => x.Phase)
                .Include(x => x.Import)
                .Where(x => x.ImportId == importId && x.PhaseId == phaseId);
        }

        public IEnumerable<HostVulnerabilityEntity> GetByPhaseId(int phaseId)
        {
            return Context.HostVulnerabilities
                .Include(x => x.Vulnerability)
                .Include(x => x.Host)
                .Include(x => x.Phase)
                .Include(x => x.Import)
                .Where(x => x.PhaseId == phaseId);
        }
    }
}
