import React from 'react'
import { createStore } from 'redux'
import { Provider } from 'react-redux'
import { shallow } from 'enzyme'
import { MemoryRouter } from 'react-router-dom'
import VulnerabilityGridContainer from './vulnerability-grid-container'
import * as actions from './vulnerability-actions'

describe("Vulnerability Grid Container", () => {
  let state

  beforeEach(() => {
    actions.handleImportClick = jest.fn().mockReturnValueOnce('handleImportClick')
    actions.handleImportPhaseChange = jest.fn().mockReturnValueOnce('handleImportPhaseChange')
    actions.handleImportFileChange = jest.fn().mockReturnValueOnce('handleImportFileChange')
    actions.handleImportSave = jest.fn().mockReturnValueOnce('handleImportSave')
    actions.handleImportCancel = jest.fn().mockReturnValueOnce('handleImportCancel')
    actions.handleImportSummaryClose = jest.fn().mockReturnValueOnce('handleImportSummaryClose')
    actions.handleSelectAll = jest.fn().mockReturnValueOnce('handleSelectAll')
    actions.handleSelectRow = jest.fn().mockReturnValueOnce('handleSelectRow')
    actions.handleSelectedItemActionsDropdownClick = jest.fn().mockReturnValueOnce('handleSelectedItemActionsDropdownClick')
    actions.handleSelectedItemActionsDropdownMouseLeave = jest.fn().mockReturnValueOnce('handleSelectedItemActionsDropdownMouseLeave')
    actions.handleSelectedItemActionsClear = jest.fn().mockReturnValueOnce('handleSelectedItemActionsClear')
    actions.handleSelectedItemActionsCreate = jest.fn().mockReturnValueOnce('handleSelectedItemActionsCreate')
    actions.handleSelectedItemActionsAssign = jest.fn().mockReturnValueOnce('handleSelectedItemActionsAssign')
    actions.handleAssignRiskChange = jest.fn().mockReturnValueOnce('handleAssignRiskChange')
    actions.handleAssignRiskCancel = jest.fn().mockReturnValueOnce('handleAssignRiskCancel')
    actions.handleAssignRiskSave = jest.fn().mockReturnValueOnce('handleAssignRiskSave')

    state = {
      branding: {
        selectedEngagement: 'engagementId',
      },
      vulnerabilityGrid: {
        filters: 'filters',
        phaseList: 'phaseList',
        importForm: 'importForm',
        importSummary: 'importSummary',
        errorMessage: 'errorMessage',
        fieldErrors: 'fieldErrors',
        selectedRows: 'selectedRows',
        riskList: 'riskList',
        assignForm: 'assignForm'
      },
      ui: {
        vulnerabilityGrid: 'ui.vulnerabilityGrid'
      },
      charts: {
        vulnerabilities: 'charts.vulnerabilities'
      },
      session: {
        entitlements: {
          list: {
            vulnerabilityRoles: 'vulnerabilityRoles'
          }
        }
      }
    }
  })

  it('should map state to props', () => {
    let store = createStore(s => s, state)
    let subject = shallow(<VulnerabilityGridContainer store={store} />)
    expect(subject.props().engagementId).toEqual('engagementId')
    expect(subject.props().phaseList).toEqual('phaseList')
    expect(subject.props().importForm).toEqual('importForm')
    expect(subject.props().importSummary).toEqual('importSummary')
    expect(subject.props().errorMessage).toEqual('errorMessage')
    expect(subject.props().fieldErrors).toEqual('fieldErrors')
    expect(subject.props().selectedRows).toEqual('selectedRows')
    expect(subject.props().riskList).toEqual('riskList')
    expect(subject.props().assignForm).toEqual('assignForm')
    expect(subject.props().entitlements).toEqual('vulnerabilityRoles')
    expect(subject.props().ui).toEqual('ui.vulnerabilityGrid')
    expect(subject.props().charts).toEqual('charts.vulnerabilities')
  })

  it('should map state to props with undefined entitlements', () => {
    state.session.entitlements.list = {}
    let store = createStore(s => s, state)
    let subject = shallow(<VulnerabilityGridContainer store={store} />)

    expect(subject.props().entitlements).toEqual({})
  })

  it('should map dispatch to props', () => {
    let store = createStore(s => s, state)
    let subject = shallow(<VulnerabilityGridContainer store={store} />)

    expect(subject.props().actions.handleImportClick).toEqual('handleImportClick')
    expect(subject.props().actions.handleImportPhaseChange).toEqual('handleImportPhaseChange')
    expect(subject.props().actions.handleImportFileChange).toEqual('handleImportFileChange')
    expect(subject.props().actions.handleImportSave).toEqual('handleImportSave')
    expect(subject.props().actions.handleImportCancel).toEqual('handleImportCancel')
    expect(subject.props().actions.handleImportSummaryClose).toEqual('handleImportSummaryClose')
    expect(subject.props().actions.handleSelectAll).toEqual('handleSelectAll')
    expect(subject.props().actions.handleSelectRow).toEqual('handleSelectRow')
    expect(subject.props().actions.handleSelectedItemActionsDropdownClick).toEqual('handleSelectedItemActionsDropdownClick')
    expect(subject.props().actions.handleSelectedItemActionsDropdownMouseLeave).toEqual('handleSelectedItemActionsDropdownMouseLeave')
    expect(subject.props().actions.handleSelectedItemActionsClear).toEqual('handleSelectedItemActionsClear')
    expect(subject.props().actions.handleSelectedItemActionsCreate).toEqual('handleSelectedItemActionsCreate')
    expect(subject.props().actions.handleSelectedItemActionsAssign).toEqual('handleSelectedItemActionsAssign')
    expect(subject.props().actions.handleAssignRiskChange).toEqual('handleAssignRiskChange')
    expect(subject.props().actions.handleAssignRiskCancel).toEqual('handleAssignRiskCancel')
    expect(subject.props().actions.handleAssignRiskSave).toEqual('handleAssignRiskSave')
  })

})
