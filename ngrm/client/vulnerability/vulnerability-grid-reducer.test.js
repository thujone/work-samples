import * as types from './vulnerability-action-types'
import * as actions from '../actions/api'
import reducer from './vulnerability-grid-reducer'

describe('Vulnerability Grid Reducer', () => {

  it('should handle VULN_GET_ITEMS_SUCCESS:', () => {
    const action = {
      type: types.VULN_GET_ITEMS_SUCCESS,
      payload: "test"
    }
    const initState = {
      data: "",
      filters: "filters",
      sort: "sort"
    }
    const expectedState = {
      data: "test",
      filters: {},
      sort: {}
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_GET_ITEMS_FETCHING', () => {
    const action = {
      type: types.VULN_GET_ITEMS_FETCHING
    }
    const initState = {
      data: "test",
      filters: "filters",
      sort: "sort"
    }
    const expectedState = {
      data: [],
      filters: {},
      sort: {}
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_GET_ITEMS_FAILED', () => {
    const action = {
      type: types.VULN_GET_ITEMS_FAILED
    }
    const initState = {
      data: "test",
      filters: "filters",
      sort: "sort"
    }
    const expectedState = {
      data: "test",
      filters: "filters",
      sort: "sort"
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SORT add field asc as only sort field', () => {
    const action = {
      type: types.VULN_SORT,
      field: "FieldName",
      comparator: "Comparator"
    }
    const initState = {
      currentPageIndex: 10,
      sort: {
        OtherName: {
          direction: "asc"
        }
      }
    }
    const expectedState = {
      currentPageIndex: 0,
      sort: {
        FieldName: {
          comparator: "Comparator",
          direction: "asc"
        }
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SORT toggle field to asc', () => {
    const action = {
      type: types.VULN_SORT,
      field: "FieldName",
      comparator: "Comparator"
    }
    const initState = {
      currentPageIndex: 10,
      sort: {
        FieldName: {
          direction: "desc"
        }
      }
    }
    const expectedState = {
      currentPageIndex: 0,
      sort: {
        FieldName: {
          comparator: "Comparator",
          direction: "asc"
        }
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SORT toggle field to desc', () => {
    const action = {
      type: types.VULN_SORT,
      field: "FieldName",
      comparator: "Comparator"
    }
    const initState = {
      currentPageIndex: 10,
      sort: {
        FieldName: {
          direction: "asc"
        }
      }
    }
    const expectedState = {
      currentPageIndex: 0,
      sort: {
        FieldName: {
          comparator: "Comparator",
          direction: "desc"
        }
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_FILTER update field filter value', () => {
    const action = {
      type: types.VULN_FILTER,
      field: "FieldName",
      value: "Value",
      filter: "Filter"
    }
    const initState = {
      currentPageIndex: 10,
      filters: {
        OtherField: {
          value: "a",
          filter: "b"
        },
        FieldName: {
          value: "",
          filter: ""
        }
      }
    }
    const expectedState = {
      currentPageIndex: 0,
      filters: {
        OtherField: {
          value: "a",
          filter: "b"
        },
        FieldName: {
          value: "Value",
          filter: "Filter"
        }
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_FILTER remove field filter when value empty', () => {
    const action = {
      type: types.VULN_FILTER,
      field: "FieldName",
      value: "",
      filter: "Filter"
    }
    const initState = {
      currentPageIndex: 10,
      filters: {
        OtherField: {
          value: "a",
          filter: "b"
        },
        FieldName: {
          value: "",
          filter: ""
        }
      }
    }
    const expectedState = {
      currentPageIndex: 0,
      filters: {
        OtherField: {
          value: "a",
          filter: "b"
        }
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_PAGE_SIZE_CHANGE', () => {
    const action = {
      type: types.VULN_PAGE_SIZE_CHANGE,
      size: 5
    }
    const initState = {
      pageSize: 10
    }
    const expectedState = {
      pageSize: 5
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_PAGE_INDEX_CHANGE', () => {
    const action = {
      type: types.VULN_PAGE_INDEX_CHANGE,
      index: 5
    }
    const initState = {
      currentPageIndex: 10
    }
    const expectedState = {
      currentPageIndex: 5
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_IMPORT_CLICK', () => {
    const action = {
      type: types.VULN_IMPORT_CLICK,
      payload: "phase list"
    }
    const initState = {
      phaseList: ""
    }
    const expectedState = {
      phaseList: "phase list"
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_IMPORT_PHASE_CHANGE', () => {
    const action = {
      type: types.VULN_IMPORT_PHASE_CHANGE,
      value: "phase id"
    }
    const initState = {
      importForm: {
        phaseId: ""
      }
    }
    const expectedState = {
      importForm: {
        phaseId: "phase id"
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_IMPORT_FILE_CHANGE', () => {
    const action = {
      type: types.VULN_IMPORT_FILE_CHANGE,
      value: "file data"
    }
    const initState = {
      importForm: {
        file: ""
      }
    }
    const expectedState = {
      importForm: {
        file: "file data"
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_POST_IMPORT_SUCCESS', () => {
    const action = {
      type: types.VULN_POST_IMPORT_SUCCESS,
      payload: "response message"
    }
    const initState = {
      importForm: {
        phaseId: "phase id",
        file: "file data"
      },
      importSummary: "",
      errorMessage: "error message",
      fieldErrors: "field errors"
    }
    const expectedState = {
      importForm: {
        phaseId: "",
        file: null
      },
      importSummary: "response message",
      errorMessage: "",
      fieldErrors: {}
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_POST_IMPORT_FAILED', () => {
    const action = {
      type: types.VULN_POST_IMPORT_FAILED,
      errorMessage: "error message",
      fieldErrors: "field errors"
    }
    const initState = {
      importForm: {
        phaseId: "phase id",
        file: "file data"
      },
      errorMessage: "",
      fieldErrors: "",
      importSummary: ""
    }
    const expectedState = {
      importForm: {
        phaseId: "phase id",
        file: "file data"
      },
      errorMessage: "error message",
      fieldErrors: "field errors",
      importSummary: ""
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_IMPORT_CANCEL', () => {
    const action = {
      type: types.VULN_IMPORT_CANCEL
    }
    const initState = {
      importForm: {
        phaseId: "phase id",
        file: "file data"
      },
      errorMessage: "error message",
      fieldErrors: "field errors",
      importSummary: "import summary"
    }
    const expectedState = {
      importForm: {
        phaseId: "",
        file: null
      },
      importSummary: "",
      errorMessage: "",
      fieldErrors: {}
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECT_ALL_CLICK updating to true', () => {
    const action = {
      type: types.VULN_SELECT_ALL_CLICK,
      checked: true,
      rows: [
        { Id: 'a' },
        { Id: 'b' }
      ]
    }
    const initState = {
      selectedRows: {
        a: false,
        b: true
      }
    }
    const expectedState = {
      selectedRows: {
        a: true,
        b: true
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECT_ALL_CLICK updating to false', () => {
    const action = {
      type: types.VULN_SELECT_ALL_CLICK,
      checked: false,
      rows: [
        { Id: 'a' },
        { Id: 'b' }
      ]
    }
    const initState = {
      selectedRows: {
        a: false,
        b: true
      }
    }
    const expectedState = {
      selectedRows: {
        a: false,
        b: false
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECT_ROW_CLICK initializing to false', () => {
    const action = {
      type: types.VULN_SELECT_ROW_CLICK,
      checked: true,
      id: 'Id'
    }
    const initState = {
      selectedRows: { }
    }
    const expectedState = {
      selectedRows: { Id: true }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECT_ROW_CLICK updating to true', () => {
    const action = {
      type: types.VULN_SELECT_ROW_CLICK,
      checked: true,
      id: 'Id'
    }
    const initState = {
      selectedRows: { Id: false }
    }
    const expectedState = {
      selectedRows: { Id: true }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECT_ROW_CLICK updating to false', () => {
    const action = {
      type: types.VULN_SELECT_ROW_CLICK,
      checked: false,
      id: 'Id'
    }
    const initState = {
      selectedRows: { Id: true }
    }
    const expectedState = {
      selectedRows: { Id: false }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECTED_ITEM_ACTIONS_CLEAR', () => {
    const action = {
      type: types.VULN_SELECTED_ITEM_ACTIONS_CLEAR
    }
    const initState = {
      selectedRows: { Id: true }
    }
    const expectedState = {
      selectedRows: {}
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECTED_ITEM_ACTIONS_CREATE', () => {
    const action = {
      type: types.VULN_SELECTED_ITEM_ACTIONS_CREATE
    }
    const initState = {
      selectedRows: { Id: true }
    }
    const expectedState = {
      selectedRows: {}
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECTED_ITEM_ACTIONS_ASSIGN', () => {
    const action = {
      type: types.VULN_SELECTED_ITEM_ACTIONS_ASSIGN,
      payload: "risk list"
    }
    const initState = {
      riskList: ""
    }
    const expectedState = {
      riskList: "risk list",
      assignForm: {
        riskId: ""
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_ASSIGN_RISK_CHANGE', () => {
    const action = {
      type: types.VULN_ASSIGN_RISK_CHANGE,
      value: 'Value'
    }
    const initState = {
      assignForm: { riskId: '' }
    }
    const expectedState = {
      assignForm: { riskId: 'Value' }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_ASSIGN_RISK_CANCEL', () => {
    const action = {
      type: types.VULN_ASSIGN_RISK_CANCEL
    }
    const initState = {
      assignForm: { riskId: 'Value' },
      fieldErrors: 'fieldErrors'
    }
    const expectedState = {
      assignForm: { riskId: '' },
      fieldErrors: {}
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_POST_ASSIGN_RISK_SUCCESS', () => {
    const action = {
      type: types.VULN_POST_ASSIGN_RISK_SUCCESS
    }
    const initState = {
      selectedRows: 'selectedRows',
      assignForm: { riskId: 'Value' },
      fieldErrors: 'fieldErrors'
    }
    const expectedState = {
      selectedRows: {},
      assignForm: { riskId: '' },
      fieldErrors: {}
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_POST_ASSIGN_RISK_FAILED', () => {
    const action = {
      type: types.VULN_POST_ASSIGN_RISK_FAILED,
      fieldErrors: 'fieldErrors'
    }
    const initState = {
      assignForm: { riskId: 'Value' },
      fieldErrors: {}
    }
    const expectedState = {
      assignForm: { riskId: 'Value' },
      fieldErrors: 'fieldErrors'
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })
})