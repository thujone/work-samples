import React from 'react'
import { Link } from 'react-router-dom'
import ValidationSummary from '../components/validation/validation-summary'
import { Table } from 'react-bootstrap'
import {
  SelectField,
  DatepickerField,
  ReadOnlyField,
  SelectResourceField
} from '../components/field'
import Pager from '../components/table/pager'
import {
  IconLinkCell,
  TextCell,
  SortableHeader,
  TextFilterHeader,
  stringComparator,
  textFilter
} from '../components/table'
import * as routes from '../constants/routes'
import { SecureHistoryButton as HistoryButton} from '../components/buttons/history-button'
import './vulnerability-detail.css'

const buildReferences = props => {
  if (!props.vulnerability.References) { return [] }

  const buildLink = (link, index) => (
    <span key={index}>
      <a href={link} target="_blank">
        {link}
      </a>
      &nbsp;
      <i className="fa fa-external-link"></i>
    </span>
  )

  return props.vulnerability.References.map(buildLink)
}

const VulnerabilityDetail = props => {

  let filteredSortedRows = [...props.vulnerability.HostList]
  Object.keys(props.vulnerability.filters).forEach(field => {
    const filterField = props.vulnerability.filters[field]
    filteredSortedRows = [...filteredSortedRows.filter(row => filterField.filter(field)(row, filterField.value))]
  })
  Object.keys(props.vulnerability.sort).forEach(field => {
    const sortField = props.vulnerability.sort[field]
    filteredSortedRows = [...filteredSortedRows.sort(sortField.comparator(field))]
    if (sortField.direction === "desc")
      filteredSortedRows = filteredSortedRows.reverse()
  })

  const getPage = (rows) => {
    var startIndex = props.vulnerability.currentPageIndex * props.vulnerability.pageSize
    var endIndex = startIndex + (props.vulnerability.pageSize)
    return rows.slice(startIndex, endIndex)
  }

  return (
    <div>
      { props.vulnerabilityDetail.isFetching &&
        <div>
          <p className="text-center">
            <i className="fa fa-5x fa-circle-o-notch fa-spin" />
          </p>
        </div>
      }
      { !props.vulnerabilityDetail.isFetching &&
        <div>
          <ValidationSummary id="vulnerability-validation-summary" validationErrors={props.ui.ValidationErrors} />
          { props.vulnerabilityDetail.IsHistorical &&
            <div className="row">
              <div className="callout">
                This vulnerability is remediated and archived.
              </div>
              <div className="clearfix" />
            </div>
          }

          <div className="row">
            <div className="col-md-9">
              <form>
                <div className="col-md-6">
                  <ReadOnlyField
                    entitlement={props.entitlements['Title']}
                    title="Title"
                    id="vuln-title"
                    value={props.vulnerability.Title}
                  />
                </div>
                <div className="col-md-6">
                  <ReadOnlyField
                    entitlement={props.entitlements['VulnerabilityCategoryId']}
                    title="Category"
                    id="vuln-category"
                    value={props.vulnerability.VulnerabilityCategory}
                  />
                </div>
                <div className="clearfix" />

                <div className="col-md-6">
                  <ReadOnlyField
                    entitlement={props.entitlements['PhaseId']}
                    title='Engagement Phase'
                    id='phase'
                    value={props.vulnerability.Phase}
                  />
                </div>

                <div className="col-md-3">
                  <ReadOnlyField
                    entitlement={props.entitlements['Service']}
                    title="Service"
                    id="vuln-service"
                    value={props.vulnerability.Service}
                  />
                </div>
                <div className="col-md-3">
                  <ReadOnlyField
                    entitlement={props.entitlements['Port']}
                    title="Port"
                    id="vuln-port"
                    value={props.vulnerability.Port}
                  />
                </div>
                <div className="clearfix" />

                <div className="col-md-12">
                  <ReadOnlyField
                    entitlement={props.entitlements['ScanDetails']}
                    title="Scan Details"
                    id="vuln-scan-details"
                    className="preserve"
                    value={props.vulnerability.ScanDetails}
                  />
                  <ReadOnlyField
                    entitlement={props.entitlements['Description']}
                    title="Description"
                    id="vuln-description"
                    className="preserve"
                    value={props.vulnerability.Description}
                  />
                  <ReadOnlyField
                    entitlement={props.entitlements['Remedy']}
                    title="Remedy"
                    id="vuln-remedy"
                    className="preserve"
                    value={props.vulnerability.Remedy}
                  />
                  {
                    Number.isInteger(props.entitlements['References']) &&
                    <dl>
                      <dt>References</dt>
                      <dd>
                        <ul id='vuln-references'>
                          <li>
                            {buildReferences(props)}
                          </li>
                        </ul>
                      </dd>
                    </dl>
                  }
                </div>
              </form>
              <div className='clearfix' />
              <div className="container-fluid">
                  <hr />
                  <div>
                    <div id="total-host-count" className="pull-right">{props.vulnerability.HostList.length} total hosts</div>
                    <h4 className="pull-left">Hosts</h4>
                    <div className="pull-left">
                      <HistoryButton
                        entitlement={props.entitlements['History']}
                        visible={props.vulnerability.allHosts && props.vulnerability.activeHosts && props.vulnerability.allHosts.length !== props.vulnerability.activeHosts.length}
                        showHistory={!props.vulnerability.showHistory}
                        onClick={() => props.actions.handleHistoryButtonToggle()}
                      />
                    </div>
                  </div>

                  <Table striped={true} condensed={true} className="outline">
                    <thead>
                      <tr>
                        <SortableHeader
                          title="IP Address"
                          entitlement={props.entitlementsHost["IpAddress"]}
                          sort={props.vulnerability.sort["IpAddress"]}
                          onClick={() => props.actions.handleHostsSort("IpAddress", stringComparator)}
                          width="220px"
                        />
                        <SortableHeader
                          title="Name"
                          entitlement={props.entitlementsHost["Name"]}
                          sort={props.vulnerability.sort["Name"]}
                          onClick={() => props.actions.handleHostsSort("Name", stringComparator)}
                        />
                        <SortableHeader
                          title="Operating System"
                          entitlement={props.entitlementsHost["OperatingSystem"]}
                          sort={props.vulnerability.sort["OperatingSystem"]}
                          onClick={() => props.actions.handleHostsSort("OperatingSystem", stringComparator)}
                        />
                        <SortableHeader
                          title="Status"
                          entitlement={props.entitlementsHost["Status"]}
                          sort={props.vulnerability.sort["Status"]}
                          onClick={() => props.actions.handleHostsSort("Status", stringComparator)}
                          width="110px"
                        />
                      </tr>
                      <tr>
                        <TextFilterHeader
                          entitlement={props.entitlementsHost["IpAddress"]}
                          onChange={(e) => props.actions.handleHostsFilter("IpAddress", e.target.value, textFilter)}
                          value={props.vulnerability.filters['IpAddress'] ? props.vulnerability.filters['IpAddress'].value : ''}
                        />
                        <TextFilterHeader
                          entitlement={props.entitlementsHost["Name"]}
                          onChange={(e) => props.actions.handleHostsFilter("Name", e.target.value, textFilter)}
                          value={props.vulnerability.filters['Name'] ? props.vulnerability.filters['Name'].value : ''}
                        />
                        <TextFilterHeader
                          entitlement={props.entitlementsHost["OperatingSystem"]}
                          onChange={(e) => props.actions.handleHostsFilter("OperatingSystem", e.target.value, textFilter)}
                          value={props.vulnerability.filters['OperatingSystem'] ? props.vulnerability.filters['OperatingSystem'].value : ''}
                        />
                        <TextFilterHeader
                          entitlement={props.entitlementsHost["Status"]}
                          onChange={(e) => props.actions.handleHostsFilter("Status", e.target.value, textFilter)}
                          value={props.vulnerability.filters['Status'] ? props.vulnerability.filters['Status'].value : ''}
                        />
                      </tr>
                    </thead>
                    <tbody>
                      {
                        getPage(filteredSortedRows).map((row, index) => {
                          return (
                            <tr key={index}>
                              <IconLinkCell
                                item={row}
                                entitlement={props.entitlementsHost["IpAddress"]}
                                col={{ field: 'IpAddress', getPath: () => `${routes.RISK_PAGE_BASE}${routes.HOST_PAGE}/${props.engagementId}/${row.PhaseId}/${row.Id}` }}
                                iconClassName={"fa fa-circle " + (row.AverageSeverity ? row.AverageSeverity.replace(' ', '-') : "")}
                                hasTag={props.vulnerabilityDetail.IsHistorical || row.IsPartiallyRemediated}
                                tagLabel='Remediated'
                                tagClassName='remediated-tag'
                              />
                              <TextCell
                                item={row}
                                entitlement={props.entitlementsHost["Name"]}
                                col={{ field: 'Name' }}
                              />
                              <TextCell
                                item={row}
                                entitlement={props.entitlementsHost["OperatingSystem"]}
                                col={{ field: 'OperatingSystem' }}
                              />
                              <TextCell
                                item={row}
                                entitlement={props.entitlementsHost["Status"]}
                                col={{ field: 'Status' }}
                              />
                            </tr>
                          )
                        })
                      }
                    </tbody>
                  </Table>
                  <Pager
                    pageSize={props.vulnerability.pageSize}
                    totalRowCount={filteredSortedRows.length}
                    currentPageIndex={props.vulnerability.currentPageIndex}
                    handlePageSize={(size) => props.actions.handleHostsPageSizeChange(size)}
                    handlePageChange={(index) => props.actions.handleHostsPageIndexChange(index)}
                  />
                </div>
            </div>
            <div className="col-md-3 gutter">
              <div className="container-fluid">
                <h4>Information</h4>
                {
                  Number.isInteger(props.entitlements["CVSSScore"]) &&
                  <dl>
                    <dt>Severity</dt>
                    <dd>
                      <p>
                        <i className={"fa fa-circle" + (props.vulnerability.Severity ? " " + props.vulnerability.Severity.replace(' ', '-') : "")} />
                        &nbsp;
                        <span id='vuln-severity'>
                          {props.vulnerability.Severity}
                        </span>
                      </p>
                    </dd>
                  </dl>
                }
                <ReadOnlyField
                  entitlement={props.entitlements['CVSSScore']}
                  title="CVSS Score"
                  id="vuln-cvss-score"
                  value={props.vulnerability.CVSSScore && props.vulnerability.CVSSScore.toFixed(1)}
                />
                <ReadOnlyField
                  entitlement={props.entitlements['PatchDate']}
                  title="Patch Date"
                  id="vuln-patch-date"
                  value={props.vulnerability.PatchDate}
                />
                <ReadOnlyField
                  entitlement={props.entitlements['VulnerabilityDate']}
                  title="Vulnerability Date"
                  id="vuln-vuln-date"
                  value={props.vulnerability.VulnerabilityDate}
                />
                <ReadOnlyField
                  entitlement={props.entitlements['ImportedDate']}
                  title="Discovery Date"
                  id="vuln-imported-date"
                  value={props.vulnerability.ImportedDate}
                />
                <ReadOnlyField
                  entitlement={props.entitlements['ImportedBy']}
                  title="Imported By"
                  id="vuln-imported-by"
                  value={props.vulnerability.ImportedBy}
                />
                <h4>Assignments</h4>

                { props.vulnerabilityDetail.IsHistorical &&
                  <span>
                    <ReadOnlyField
                      entitlement={props.entitlements['RemediationStatusId']}
                      title="Remediation Status"
                      id="remediation-status"
                      value={props.vulnerability.MitigationStatusList[props.vulnerability.RemediationStatusId - 1].ResourceName}
                    />
                    <ReadOnlyField
                      entitlement={props.entitlements['RemediationResource']}
                      title="Remediation Resource"
                      id="remediation-resource"
                      value={props.vulnerability.RemediationResource}
                    />
                    <ReadOnlyField
                      entitlement={props.entitlements['TargetRemediationDate']}
                      title="Target Remediation Date"
                      id="target-remediation-date"
                      value={props.vulnerability.TargetRemediationDate}
                    />
                    <ReadOnlyField
                      entitlement={props.entitlements['MitigationDate']}
                      title="Remediated Date"
                      id="remediated-date"
                      value={props.vulnerability.MitigationDate}
                    />
                  </span>
                }

                { !props.vulnerabilityDetail.IsHistorical &&
                  <form>
                    <SelectField
                      label='Remediation Status'
                      entitlement={props.entitlements['RemediationStatusId']}
                      hasError={props.ui.ValidationErrors['RemediationStatusId']}
                      id='remediation-status'
                      onChange={(e) => props.actions.handleRemediationStatusChange(e.target.value)}
                      value={props.vulnerability.RemediationStatusId}
                    >
                      <option value="">Select</option>
                      {
                        props.vulnerability.MitigationStatusList &&
                        props.vulnerability.MitigationStatusList.map((option, index) => {
                          return (
                            <option key={index} value={option.ResourceId}>{option.ResourceName}</option>
                          )
                        })
                      }
                    </SelectField>

                    <SelectResourceField
                      resourceId={props.vulnerability.ResourceId}
                      groupId={props.vulnerability.GroupId}
                      resourceList={props.vulnerability.ResourceList}
                      groupList={props.vulnerability.GroupList}
                      entitlement={props.entitlements.RemediationResource}
                      onChangeAction={props.actions.onResourceChange}
                      hasError={props.ui.ValidationErrors.RemediationResource}
                    />

                    <DatepickerField
                      id='target-remediation-date'
                      label='Target Remediation Date'
                      entitlement={props.entitlements['TargetRemediationDate']}
                      hasError={props.ui.ValidationErrors['TargetRemediationDate']}
                      visible={props.ui.showTargetRemediationDatepicker}
                      value={props.vulnerability.TargetRemediationDate}
                      onChange={(e) => props.actions.handleTargetRemediationDateChange(e.target.value)}
                      onClick={(e) => props.actions.onTargetRemediationDateButtonClick()}
                      onSelected={(value) => props.actions.handleTargetRemediationDateSelected(value)}
                      onClose={(e) => props.actions.handleTargetRemediationDateClose()}
                      onBlur={(e) => props.actions.handleTargetRemediationDateBlur()}
                    />

                    <DatepickerField
                      id='remediation-date'
                      label='Remediated Date'
                      entitlement={props.entitlements['MitigationDate']}
                      hasError={props.ui.ValidationErrors['MitigationDate']}
                      visible={props.ui.showRemediatedDatePicker}
                      value={props.vulnerability.MitigationDate}
                      maxDate={0}
                      onChange={(e) => props.actions.handleRemediatedDateChange(e.target.value)}
                      onClick={(e) => props.actions.handleRemediatedDateClick()}
                      onSelected={(value) => props.actions.handleRemediatedDateSelected(value)}
                      onClose={(e) => props.actions.handleRemediatedDateClose()}
                      onBlur={(e) => props.actions.handleRemediatedDateBlur()}
                    />
                  </form>
                }

                { props.vulnerability.ExploitList && props.vulnerability.ExploitList.length > 0 &&
                  <div>
                    <br />
                    <h4>Exploitable With</h4>
                    <ul id='vuln-exploit-with'>
                      {props.vulnerability.ExploitList && props.vulnerability.ExploitList.map((ex, i) => (<li key={i}>{ex}</li>))}
                    </ul>
                  </div>
                }

                { props.vulnerability.RiskList && props.vulnerability.RiskList.length > 0 &&
                  <div>
                    <br />
                    <h4>Associated Risk</h4>
                    <ul id="vuln-risk-list" className="list-unstyled">
                      {
                        props.vulnerability.RiskList.map((risk, i) => {
                          return (
                            <li key={i}>
                              <Link to={routes.RISK_PAGE_BASE + routes.RISK_PAGE + "/" + risk.Id}>{risk.Name}</Link>
                            </li>
                          )
                        })
                      }
                    </ul>
                  </div>
                }

                { props.vulnerability.CVEList && props.vulnerability.CVEList.length > 0 &&
                  <div>
                    <br />
                    <h4>CVE</h4>
                    <ul id='vuln-cve-list'>
                      {props.vulnerability.CVEList.map((cve, i) => <li key={i}>{cve}</li>)}
                    </ul>
                  </div>
                }
              </div>
            </div>
          </div>
          <div className="container-fluid">
            <br />
            <div className="pull-right">
              { props.vulnerability.RemediationStatus !== 'Fully Mitigated' &&
                <div>
                  <button
                    id="vuln-save-button"
                    className="btn btn-default"
                    disabled={props.vulnerability.IsFetching}
                    onClick={(e) => props.actions.update(props.vulnerability, props.history)}
                  >
                    Save Vulnerability
                  </button>
                  <Link
                    id="vuln-cancel-button"
                    to={routes.RISK_PAGE_BASE + routes.VULN_PAGE + '/' + props.engagementId}
                    className="btn btn-alternate">
                    Cancel
                  </Link>
                </div>
              }
              { props.vulnerability.RemediationStatus === 'Fully Mitigated' &&
                <Link
                  id="vuln-cancel-button"
                  to={routes.RISK_PAGE_BASE + routes.VULN_PAGE + '/' + props.engagementId}
                  className="btn btn-alternate">
                  Back
                </Link>
              }
              </div>
            <div className="clearfix"></div>
          </div>
        </div>
      }
    </div>
  )
}

export default VulnerabilityDetail
