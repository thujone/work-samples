import { connect } from 'react-redux'
import { fetchTable } from '../components/table/fetch-table'
import VulnerabilityGrid from './vulnerability-grid'
import * as actions from './vulnerability-actions'
import * as tableActions from '../components/table/actions'

const mapStateToProps = state => {
  return {
    selectedEngagement: state.branding.selectedEngagement,
    rows: state.vulnerabilityGrid.data,
    sort: state.vulnerabilityGrid.sort,
    filters: state.vulnerabilityGrid.filters,
    phaseList: state.vulnerabilityGrid.phaseList,
    importForm: state.vulnerabilityGrid.importForm,
    importSummary: state.vulnerabilityGrid.importSummary,
    errorMessage: state.vulnerabilityGrid.errorMessage,
    fieldErrors: state.vulnerabilityGrid.fieldErrors,
    selectedRows: state.vulnerabilityGrid.selectedRows,
    riskList: state.vulnerabilityGrid.riskList,
    assignForm: state.vulnerabilityGrid.assignForm,
    entitlements: state.session.entitlements.list['vulnerabilityRoles'] || {},
    ui: state.ui.vulnerabilityGrid,
    charts: state.charts.vulnerabilities,
    showHistory: state.ui.table.vulnerability.showHistory,
    allVulns: state.ui.table.vulnerability.allVulns,
    activeVulns: state.ui.table.vulnerability.activeVulns,
    isFetching: state.ui.table.vulnerability.isFetching
  }
}

const mapDispatchToProps = dispatch => ({
  actions: {
    handleSelectAll: actions.handleSelectAll(dispatch),
    handleSelectRow: actions.handleSelectRow(dispatch),
    handleSelectedItemActionsDropdownClick: actions.handleSelectedItemActionsDropdownClick(dispatch),
    handleSelectedItemActionsDropdownMouseLeave: actions.handleSelectedItemActionsDropdownMouseLeave(dispatch),
    handleSelectedItemActionsClear: actions.handleSelectedItemActionsClear(dispatch),
    handleSelectedItemActionsCreate: actions.handleSelectedItemActionsCreate(dispatch),
    handleSelectedItemActionsAssign: actions.handleSelectedItemActionsAssign(dispatch),
    handleAssignRiskChange: actions.handleAssignRiskChange(dispatch),
    handleAssignRiskCancel: actions.handleAssignRiskCancel(dispatch),
    handleAssignRiskSave: actions.handleAssignRiskSave(dispatch),
    handleImportClick: actions.handleImportClick(dispatch),
    handleImportPhaseChange: actions.handleImportPhaseChange(dispatch),
    handleImportFileChange: actions.handleImportFileChange(dispatch),
    handleImportSave: actions.handleImportSave(dispatch),
    handleImportCancel: actions.handleImportCancel(dispatch),
    handleImportSummaryClose: actions.handleImportSummaryClose(dispatch),
    handleHistoryButtonToggle: tableActions.handleHistoryButtonToggle(dispatch)('vulnerability'),
    initGridState: tableActions.initGridState(dispatch)('vulnerability')
  }
})

const mergeProps = (stateProps, dispatchProps, ownProps) => {
  return Object.assign({}, stateProps, dispatchProps, ownProps, {
    engagementId: stateProps.selectedEngagement || ownProps.match.params.engagementId
  })
}

export const VulnerabilityGridContainer = connect(
  mapStateToProps,
  mapDispatchToProps,
  mergeProps
)(fetchTable('vulnerability')(VulnerabilityGrid))

export default VulnerabilityGridContainer
