import * as types from './vulnerability-action-types'
import * as actions from '../actions/api'
import reducer from './vulnerability-grid-ui-reducer'

describe('Vulnerability Grid UI Reducer', () => {

  it('should handle VULN_IMPORT_CLICK:', () => {
    const action = {
      type: types.VULN_IMPORT_CLICK
    }
    const initState = {
      importButtonIsVisible: true,
      importFormIsVisible: false,
      importSummaryIsVisible: false,
      importProcessing: false,
    }
    const expectedState = {
      importButtonIsVisible: false,
      importFormIsVisible: true,
      importSummaryIsVisible: false,
      importProcessing: false,
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_POST_IMPORT_FETCHING:', () => {
    const action = {
      type: types.VULN_POST_IMPORT_FETCHING
    }
    const initState = {
      importButtonIsVisible: true,
      importFormIsVisible: false,
      importSummaryIsVisible: false,
      importProcessing: false,
      importFailed: false
    }
    const expectedState = {
      importButtonIsVisible: false,
      importFormIsVisible: false,
      importSummaryIsVisible: false,
      importProcessing: true,
      importFailed: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_POST_IMPORT_SUCCESS:', () => {
    const action = {
      type: types.VULN_POST_IMPORT_SUCCESS
    }
    const initState = {
      importButtonIsVisible: true,
      importFormIsVisible: false,
      importSummaryIsVisible: false,
      importProcessing: false,
      importFailed: false
    }
    const expectedState = {
      importButtonIsVisible: false,
      importFormIsVisible: false,
      importSummaryIsVisible: true,
      importProcessing: false,
      importFailed: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_POST_IMPORT_FAILED:', () => {
    const action = {
      type: types.VULN_POST_IMPORT_FAILED
    }
    const initState = {
      importButtonIsVisible: true,
      importFormIsVisible: false,
      importSummaryIsVisible: false,
      importProcessing: false,
      importFailed: false
    }
    const expectedState = {
      importButtonIsVisible: false,
      importFormIsVisible: false,
      importSummaryIsVisible: true,
      importProcessing: false,
      importFailed: true
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_IMPORT_SUMMARY_CLOSE:', () => {
    const action = {
      type: types.VULN_IMPORT_SUMMARY_CLOSE
    }
    const initState = {
      importButtonIsVisible: false,
      importFormIsVisible: false,
      importSummaryIsVisible: true,
      importProcessing: false,
      importFailed: false
    }
    const expectedState = {
      importButtonIsVisible: true,
      importFormIsVisible: false,
      importSummaryIsVisible: false,
      importProcessing: false,
      importFailed: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_IMPORT_SUMMARY_CLOSE when import failed', () => {
    const action = {
      type: types.VULN_IMPORT_SUMMARY_CLOSE
    }
    const initState = {
      importButtonIsVisible: false,
      importFormIsVisible: false,
      importSummaryIsVisible: true,
      importProcessing: false,
      importFailed: true
    }
    const expectedState = {
      importButtonIsVisible: false,
      importFormIsVisible: true,
      importSummaryIsVisible: false,
      importProcessing: false,
      importFailed: true
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_IMPORT_CANCEL:', () => {
    const action = {
      type: types.VULN_IMPORT_CANCEL
    }
    const initState = {
      importButtonIsVisible: false,
      importFormIsVisible: true,
      importSummaryIsVisible: false,
      importProcessing: false,
      importFailed: true
    }
    const expectedState = {
      importButtonIsVisible: true,
      importFormIsVisible: false,
      importSummaryIsVisible: false,
      importProcessing: false,
      importFailed: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_EXPORT_DROPDOWN_CLICK:', () => {
    const action = {
      type: types.VULN_EXPORT_DROPDOWN_CLICK
    }
    const initState = {
      exportDropdownIsOpen: false
    }
    const expectedState = {
      exportDropdownIsOpen: true
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_EXPORT_DROPDOWN_MOUSE_LEAVE:', () => {
    const action = {
      type: types.VULN_EXPORT_DROPDOWN_MOUSE_LEAVE
    }
    const initState = {
      exportDropdownIsOpen: true,
    }
    const expectedState = {
      exportDropdownIsOpen: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_POST_EXPORT_SUCCESS:', () => {
    const action = {
      type: types.VULN_POST_EXPORT_SUCCESS
    }
    const initState = {
      exportDropdownIsOpen: true,
    }
    const expectedState = {
      exportDropdownIsOpen: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECTED_ITEM_ACTIONS_DROPDOWN_CLICK:', () => {
    const action = {
      type: types.VULN_SELECTED_ITEM_ACTIONS_DROPDOWN_CLICK
    }
    const initState = {
      selectedItemActionsDropdownIsOpen: false
    }
    const expectedState = {
      selectedItemActionsDropdownIsOpen: true
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECTED_ITEM_ACTIONS_DROPDOWN_MOUSE_LEAVE:', () => {
    const action = {
      type: types.VULN_SELECTED_ITEM_ACTIONS_DROPDOWN_MOUSE_LEAVE
    }
    const initState = {
      selectedItemActionsDropdownIsOpen: true,
    }
    const expectedState = {
      selectedItemActionsDropdownIsOpen: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECTED_ITEM_ACTIONS_CLEAR:', () => {
    const action = {
      type: types.VULN_SELECTED_ITEM_ACTIONS_CLEAR
    }
    const initState = {
      selectedItemActionsDropdownIsOpen: true,
    }
    const expectedState = {
      selectedItemActionsDropdownIsOpen: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECTED_ITEM_ACTIONS_CREATE:', () => {
    const action = {
      type: types.VULN_SELECTED_ITEM_ACTIONS_CREATE
    }
    const initState = {
      selectedItemActionsDropdownIsOpen: true,
    }
    const expectedState = {
      selectedItemActionsDropdownIsOpen: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECTED_ITEM_ACTIONS_ASSIGN:', () => {
    const action = {
      type: types.VULN_SELECTED_ITEM_ACTIONS_ASSIGN
    }
    const initState = {
      selectedItemActionsDropdownIsOpen: true,
      assignRiskFormIsVisible: false
    }
    const expectedState = {
      selectedItemActionsDropdownIsOpen: false,
      assignRiskFormIsVisible: true
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECT_ALL_CLICK:', () => {
    const action = {
      type: types.VULN_SELECT_ALL_CLICK
    }
    const initState = {
      assignRiskFormIsVisible: true
    }
    const expectedState = {
      assignRiskFormIsVisible: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECT_ROW_CLICK:', () => {
    const action = {
      type: types.VULN_SELECT_ROW_CLICK
    }
    const initState = {
      assignRiskFormIsVisible: true
    }
    const expectedState = {
      assignRiskFormIsVisible: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_ASSIGN_RISK_CANCEL', () => {
    const action = {
      type: types.VULN_ASSIGN_RISK_CANCEL
    }
    const initState = {
      assignRiskFormIsVisible: true
    }
    const expectedState = {
      assignRiskFormIsVisible: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })
})