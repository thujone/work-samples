import React from 'react'
import { shallow } from 'enzyme'
import { Link } from 'react-router-dom'
import Asterisk from '../components/validation/asterisk'
import ValidationSummary from '../components/validation/validation-summary'
import Datepicker from '../components/datepicker/datepicker'
import { Table } from 'react-bootstrap'
import {
  SelectField,
  DatepickerField,
  SelectResourceField
} from '../components/field'
import Pager from '../components/table/pager'
import {
  IconLinkCell,
  TextCell,
  SortableHeader,
  TextFilterHeader,
  stringComparator,
  numberComparator,
  textFilter
} from '../components/table'
import VulnerabilityDetail from './vulnerability-detail'
import * as routes from '../constants/routes'

describe('Vulnerability Detail', () => {
  let props

  beforeEach(() => {
    props = {
      history: [],
      engagementId: 'engagementId',
      entitlements: {},
      vulnerability: {
        currentPageIndex: 0,
        pageSize: 10,
        sort: {},
        filters: {},
        HostList: [],
        ResourceId: 'resourceId',
        ResourceList: [],
        GroupId: 'groupId',
        GroupList: []
      },
      ui: {
        ValidationErrors: {},
        showRemediatedDatePicker: false
      },
      actions: {
        handlePhaseChange: jest.fn(),
        handleMitigationDateChange: jest.fn(),
        handleTargetRemediationDateChange: jest.fn(),
        handleMitigationDateSelected: jest.fn(),
        handleTargetRemediationDateSelected: jest.fn(),
        onRemediationStatusChange: jest.fn(),
        onAddResource: jest.fn(),
        onResourceSave: jest.fn(),
        onDateButtonClick: jest.fn(),
        onTargetRemediationDateButtonClick: jest.fn(),
        update: jest.fn(),
        handleRemediationDateClose: jest.fn(),
        handleTargetRemediationDateClose: jest.fn(),
        handleHostsSort: jest.fn(),
        handleHostsFilter: jest.fn(),
        handleHostsPageSizeChange: jest.fn(),
        handleHostsPageIndexChange: jest.fn(),

      }
    }
  })

  it("should render validation summary", () => {
    let subject = shallow(<VulnerabilityDetail {...props} />)
    let validationSummary = subject.find(ValidationSummary)
    expect(validationSummary.props().id).toEqual("vulnerability-validation-summary")
    expect(validationSummary.props().validationErrors).toEqual(props.ui.ValidationErrors)
  })

  it('should render Title', () => {
    props.entitlements['Title'] = 0
    props.vulnerability.Title = 'title'

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.find({ entitlement: 0, title: "Title", id: "vuln-title", value: "title" })
    expect(field).toHaveLength(1)
  })

  it('should render Category', () => {
    props.entitlements['VulnerabilityCategoryId'] = 0
    props.vulnerability.VulnerabilityCategory = 'category'

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.find({ entitlement: 0, title: "Category", id: "vuln-category", value: "category" })
    expect(field).toHaveLength(1)
  })

  it("should render Phase select field", () => {
    props.entitlements['PhaseId'] = 1
    props.vulnerability.PhaseId = 'phaseId'
    props.ui.ValidationErrors['PhaseId'] = {name:'errors'}
    props.vulnerability.PhaseList = [
      { ResourceId: "resourceId", ResourceName: "resourceName" }
    ]

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.findWhere(f => f.props().label === "Engagement Phase")
    expect(field.props().id).toEqual("phase")
    expect(field.props().required).toEqual(true)
    expect(field.props().entitlement).toEqual(1)
    expect(field.props().hasError).toBeTruthy()
    expect(field.props().value).toEqual("phaseId")

    let options = field.find('option')
    expect(options.at(0).props().value).toEqual("")
    expect(options.at(0).text()).toEqual("Select")
    expect(options.at(1).props().value).toEqual("resourceId")
    expect(options.at(1).text()).toEqual("resourceName")
  })

  it("should handle Phase on change", () => {
    let event = {
      target: {
        value: "Value"
      }
    }

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.findWhere(f => f.props().label === "Engagement Phase")
    field.props().onChange(event)
    expect(props.actions.handlePhaseChange).toHaveBeenCalledWith("Value")
  })

  it('should render Service', () => {
    props.entitlements['Service'] = 0
    props.vulnerability.Service = 'service'

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.find({ entitlement: 0, title: "Service", id: "vuln-service", value: "service" })
    expect(field).toHaveLength(1)
  })

  it('should render Port', () => {
    props.entitlements['Port'] = 0
    props.vulnerability.Port = 'port'

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.find({ entitlement: 0, title: "Port", id: "vuln-port", value: "port" })
    expect(field).toHaveLength(1)
  })

  it('should render Scan Details', () => {
    props.entitlements['ScanDetails'] = 0
    props.vulnerability.ScanDetails = 'scanDetails'

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.find({ entitlement: 0, title: "Scan Details", id: "vuln-scan-details", value: "scanDetails" })
    expect(field).toHaveLength(1)
  })

  it('should render Description', () => {
    props.entitlements['Description'] = 0
    props.vulnerability.Description = 'description'

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.find({ entitlement: 0, title: "Description", id: "vuln-description", value: "description" })
    expect(field).toHaveLength(1)
  })

  it('should render Remedy', () => {
    props.entitlements['Remedy'] = 0
    props.vulnerability.Remedy = 'remedy'

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.find({ entitlement: 0, title: "Remedy", id: "vuln-remedy", value: "remedy" })
    expect(field).toHaveLength(1)
  })

  it('should render References', () => {
    props.entitlements['References'] = 0
    props.vulnerability.References = ['reference']

    let subject = shallow(<VulnerabilityDetail {...props} />)
    const a = subject.find('#vuln-references').find('span').find('a')
    expect(a.props().href).toEqual('reference')
    expect(a.props().target).toEqual('_blank')
    expect(a.text()).toEqual('reference')
  })

  it('should render total hosts count', () => {
    props.entitlementsHost = { IpAddress: 0, Name: 0, OperatingSystem: 0 }
    props.vulnerability.HostList = [
      { Id: 'id', IpAddress: 'ipAddress', Name: 'name', OperatingSystem: 'operatingSystem' }
    ]

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let element = subject.find('#total-host-count')
    expect(element.text()).toEqual('1 total hosts')
  })

  it('should pass titles to column headers', () => {
    props.entitlementsHost = { IpAddress: 0, Name: 0, OperatingSystem: 0 }
    props.vulnerability.HostList = [
      { Id: 'id', IpAddress: 'ipAddress', Name: 'name', OperatingSystem: 'operatingSystem' }
    ]

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let headers = subject.find(SortableHeader)
    let titles = headers.map(h => h.props().title)
    expect(titles).toEqual(
      [
        'IP Address',
        'Name',
        'Operating System'
      ]
    )
  })

  it('should pass sort objects to headers', () => {
    props.entitlementsHost = { IpAddress: 0, Name: 0, OperatingSystem: 0 }
    props.vulnerability.HostList = [
      { Id: 'id', IpAddress: 'ipAddress', Name: 'name', OperatingSystem: 'operatingSystem' }
    ]
    props.vulnerability.sort = {
      IpAddress: { direction: 'desc', comparator: () => 0 },
      Name: { direction: 'desc', comparator: () => 0 },
      OperatingSystem: { direction: 'desc', comparator: () => 0 }
    }

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let headers = subject.find(SortableHeader)
    headers.forEach(header => {
      expect(header.props().sort.direction).toEqual('desc')
    })
  })

  it('should pass sort handleHostsSort to sort headers', () => {
    props.entitlementsHost = { IpAddress: 0, Name: 0, OperatingSystem: 0 }
    props.vulnerability.HostList = [
      { Id: 'id', IpAddress: 'ipAddress', Name: 'name', OperatingSystem: 'operatingSystem' }
    ]

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let headers = subject.find(SortableHeader)
    headers.forEach(header => {
      header.props().onClick()
    })
    expect(props.actions.handleHostsSort).toHaveBeenCalledTimes(3)
  })

  it('should pass handleHostsFilter to filter headers', () => {
    props.entitlementsHost = { IpAddress: 0, Name: 0, OperatingSystem: 0 }
    props.vulnerability.HostList = [
      { Id: 'id', IpAddress: 'ipAddress', Name: 'name', OperatingSystem: 'operatingSystem' }
    ]

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let headers = subject.find(TextFilterHeader)
    headers.forEach(header => {
      header.props().onChange({ target: { value: 1 } })
    })
    expect(props.actions.handleHostsFilter).toHaveBeenCalledTimes(3)
  })

  it('should render tbody Row', () => {
    props.entitlementsHost = { IpAddress: 0, Name: 0, OperatingSystem: 0 }
    props.vulnerability.HostList = [
      { Id: 'id', IpAddress: 'ipAddress', Name: 'name', OperatingSystem: 'operatingSystem' }
    ]

    let subject = shallow(<VulnerabilityDetail {...props} />)
    expect(subject.find(IconLinkCell).props().item).toEqual(props.vulnerability.HostList[0])
    expect(subject.find(IconLinkCell).props().col.getPath()).toEqual(routes.RISK_PAGE_BASE + routes.HOST_PAGE + "/engagementId/id")
    const textCells = subject.find(TextCell)
    expect(subject.find(TextCell).at(0).props().col.field).toEqual("Name")
    expect(subject.find(TextCell).at(1).props().col.field).toEqual("OperatingSystem")
  })

  it('should render a Pager component, passing required props along', () => {
    props.entitlementsHost = { IpAddress: 0, Name: 0, OperatingSystem: 0 }
    props.vulnerability.HostList = [
      { Id: 'id', IpAddress: 'ipAddress', Name: 'name', OperatingSystem: 'operatingSystem' }
    ]

    let subject = shallow(<VulnerabilityDetail {...props} />)
    expect(subject.find(Pager).props().pageSize).toEqual(10)
    expect(subject.find(Pager).props().totalRowCount).toEqual(props.vulnerability.HostList.length)
    expect(subject.find(Pager).props().currentPageIndex).toEqual(0)
    expect(subject.find(Pager).props().handlePageSize).toBeInstanceOf(Function)
    expect(subject.find(Pager).props().handlePageChange).toBeInstanceOf(Function)
  })

  it('should render Severity', () => {
    props.entitlements['CVSSScore'] = 0
    props.vulnerability.Severity = 'severity'

    let subject = shallow(<VulnerabilityDetail {...props} />)
    expect(subject.find('.fa.fa-circle.severity').type()).toEqual('i')
    expect(subject.find('#vuln-severity').text()).toEqual('severity')
  })

  it('should render CVSS Score', () => {
    props.entitlements['CVSSScore'] = 0
    props.vulnerability.CVSSScore = 1.234

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.find({ entitlement: 0, title: "CVSS Score", id: "vuln-cvss-score", value: "1.2" })
    expect(field).toHaveLength(1)
  })

  it('should render Patch Date', () => {
    props.entitlements['PatchDate'] = 0
    props.vulnerability.PatchDate = 'patchDate'

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.find({ entitlement: 0, title: "Patch Date", id: "vuln-patch-date", value: "patchDate" })
    expect(field).toHaveLength(1)
  })

  it('should render Vulnerability Date', () => {
    props.entitlements['VulnerabilityDate'] = 0
    props.vulnerability.VulnerabilityDate = 'vulnerabilityDate'

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.find({ entitlement: 0, title: "Vulnerability Date", id: "vuln-vuln-date", value: "vulnerabilityDate" })
    expect(field).toHaveLength(1)
  })

  it('should render Discovery Date', () => {
    props.entitlements['ImportedDate'] = 0
    props.vulnerability.ImportedDate = 'importedDate'

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.find({ entitlement: 0, title: "Discovery Date", id: "vuln-imported-date", value: "importedDate" })
    expect(field).toHaveLength(1)
  })

  it('should render Imported By', () => {
    props.entitlements['ImportedBy'] = 0
    props.vulnerability.ImportedBy = 'importedBy'

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.find({ entitlement: 0, title: "Imported By", id: "vuln-imported-by", value: "importedBy" })
    expect(field).toHaveLength(1)
  })

  it("should render Remediation Status select field", () => {
    props.entitlements['RemediationStatusId'] = 1
    props.ui.ValidationErrors['RemediationStatusId'] = {name:'errors'}
    props.vulnerability.RemediationStatusId = "remediationStatusId"
    props.vulnerability.MitigationStatusList = [
      { ResourceId: "resourceId", ResourceName: "resourceName" }
    ]

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.findWhere(f => f.props().label === "Remediation Status")
    expect(field.props().id).toEqual("remediation-status")
    expect(field.props().entitlement).toEqual(1)
    expect(field.props().hasError).toBeTruthy()
    expect(field.props().value).toEqual("remediationStatusId")

    let options = field.find('option')
    expect(options.at(0).props().value).toEqual("")
    expect(options.at(0).text()).toEqual("Select")
    expect(options.at(1).props().value).toEqual("resourceId")
    expect(options.at(1).text()).toEqual("resourceName")
  })

  it("should handle Remediation Status on change", () => {
    let event = {
      target: {
        value: "Value"
      }
    }

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.findWhere(f => f.props().label === "Remediation Status")
    field.props().onChange(event)
    expect(props.actions.onRemediationStatusChange).toHaveBeenCalledWith("Value")
  })

  it("should render Remediated Date datepicker field", () => {
    props.entitlements['MitigationDate'] = 1
    props.ui.ValidationErrors['MitigationDate'] = {name:'errors'}
    props.vulnerability.MitigationDate = "mitigationDate"
    props.ui.showRemediatedDatePicker = true

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.findWhere(f => f.props().label === "Remediated Date")
    expect(field.props().id).toEqual("remediation-date")
    expect(field.props().entitlement).toEqual(1)
    expect(field.props().hasError).toBeTruthy()
    expect(field.props().value).toEqual("mitigationDate")
    expect(field.props().visible).toEqual(true)
  })

  it("should handle Remediated Date on change", () => {
    let event = {
      target: {
        value: "Value"
      }
    }
    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.findWhere(f => f.props().label === "Remediated Date")
    field.props().onChange(event)
    expect(props.actions.handleMitigationDateChange).toHaveBeenCalledWith("Value")
  })

  it("should handle Remediated Date on selected", () => {
    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.findWhere(f => f.props().label === "Remediated Date")
    field.props().onSelected("Value")
    expect(props.actions.handleMitigationDateSelected).toHaveBeenCalledWith("Value")
  })

  it("should handle Remediated Date on click", () => {
    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.findWhere(f => f.props().label === "Remediated Date")
    field.props().onClick()
    expect(props.actions.onDateButtonClick).toHaveBeenCalled()
  })

  it("should handle Remediated Date on close", () => {
    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.findWhere(f => f.props().label === "Remediated Date")
    field.props().onClose()
    expect(props.actions.handleRemediationDateClose).toHaveBeenCalled()
  })

  it("should handle Target Remediation Date on selected", () => {
    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.findWhere(f => f.props().label === "Target Remediation Date")
    field.props().onSelected("Value")
    expect(props.actions.handleTargetRemediationDateSelected).toHaveBeenCalledWith("Value")
  })

  it("should handle Target Remediation Date on click", () => {
    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.findWhere(f => f.props().label === "Target Remediation Date")
    field.props().onClick()
    expect(props.actions.onTargetRemediationDateButtonClick).toHaveBeenCalled()
  })

  it("should handle Target Remediation Date on close", () => {
    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.findWhere(f => f.props().label === "Target Remediation Date")
    field.props().onClose()
    expect(props.actions.handleTargetRemediationDateClose).toHaveBeenCalled()
  })

  it("should render Remediated Resource select field", () => {
    props.entitlements['RemediationResource'] = 1
    props.ui.ValidationErrors['RemediationResource'] = {name:'errors'}
    props.vulnerability.ResourceId = 'resourceId'
    props.vulnerability.GroupId = 'groupId'
    props.vulnerability.ResourceList = ['resourceList']
    props.vulnerability.GroupList = ['groupList']
    props.actions.onResourceChange = jest.fn().mockReturnValue('onResourceChange')

    let subject = shallow(<VulnerabilityDetail {...props} />)
    let field = subject.find(SelectResourceField)
    expect(field.props().entitlement).toEqual(1)
    expect(field.props().hasError).toBeTruthy()
    expect(field.props().groupId).toEqual('groupId')
    expect(field.props().groupList[0]).toEqual('groupList')
    expect(field.props().resourceId).toEqual('resourceId')
    expect(field.props().resourceList[0]).toEqual('resourceList')
    expect(field.props().onChangeAction()).toEqual('onResourceChange')
  })

  it('should render Exploitable With', () => {
    props.vulnerability.ExploitList = ['exploit']

    let subject = shallow(<VulnerabilityDetail {...props} />)
    const list = subject.find('#vuln-exploit-with')
    expect(list.find('li').at(0).text()).toEqual('exploit')
  })

  it('should render Associated Risk', () => {
    props.vulnerability.RiskList = [{Id: 'Id', Name: 'Risk Name'}]

    let subject = shallow(<VulnerabilityDetail {...props} />)
    const riskList = subject.find('#vuln-risk-list')
    expect(riskList.find(Link).props().to).toEqual(routes.RISK_PAGE_BASE + routes.RISK_PAGE + "/Id")
  })

  it('should render CVE', () => {
    props.vulnerability.CVEList = ['cve']

    let subject = shallow(<VulnerabilityDetail {...props} />)
    const cveList = subject.find('#vuln-cve-list')
    expect(cveList.find('li').at(0).text()).toEqual('cve')
  })

  it("should render save button", () => {
    let subject = shallow(<VulnerabilityDetail {...props} />)
    let saveButton = subject.find("#vuln-save-button")
    expect(saveButton.props().className).toEqual("btn btn-default")
  })

  it("should handle save button on click", () => {
    let subject = shallow(<VulnerabilityDetail {...props} />)
    subject.find("#vuln-save-button").simulate("click")
    expect(props.actions.update).toHaveBeenCalledWith(props.vulnerability, props.history)
  })

  it('should render Cancel button', () => {
    let subject = shallow(<VulnerabilityDetail {...props} />)
    let link = subject.find(Link)
    expect(link.props().id).toEqual("vuln-cancel-button")
    expect(link.props().to).toEqual(routes.RISK_PAGE_BASE + routes.VULN_PAGE + '/engagementId')
    expect(link.props().className).toEqual("btn btn-alternate")
  })
})
