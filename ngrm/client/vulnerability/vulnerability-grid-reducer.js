import * as types from './vulnerability-action-types'

export const initState = {
  currentPageIndex: 0,
  pageSize: 10,
  filters: {},
  sort: {},
  data: [],
  phaseList: [],
  isFetching: false,
  importForm: {
    phaseId: '',
    file: null
  },
  importSummary: '',
  errorMessage: '',
  fieldErrors: {},
  selectedRows: {},
  riskList: [],
  assignForm: {
    riskId: ''
  }
}

const vulnerabilityGridReducer = (state = initState, action) => {
  switch (action.type) {
    case types.VULN_GET_ITEMS_SUCCESS:
      return {
        ...state,
        data: action.payload,
        filters: {},
        sort: {}
      }
    case types.VULN_GET_ITEMS_FETCHING:
      return {
        ...state,
        data: [],
        filters: {},
        sort: {}
      }
    case types.VULN_GET_ITEMS_FAILED:
      return {
        ...state
      }
    case types.VULN_SORT:
      let localSort = {}

      // toggle sort direction from asc to desc for field
      if (state.sort[action.field] && state.sort[action.field].direction === "asc") {
        localSort[action.field] = {
          direction: "desc",
          comparator: action.comparator
        }
      }
      else {
        // set sort direction asc for field
        localSort[action.field] = {
          direction: "asc",
          comparator: action.comparator
        }
      }

      return {
        ...state,
        sort: localSort,
        currentPageIndex: 0
      }

    case types.VULN_FILTER:
      const localFilters = {
        ...state.filters
      }

      // update field filter value only when not empty
      if (action.value && action.value !== "") {
        localFilters[action.field] = {
          value: action.value,
          filter: action.filter
        }
      } else {
        // remove field filter when empty
        delete localFilters[action.field]
      }

      return {
        ...state,
        filters: localFilters,
        currentPageIndex: 0
      }
    case types.VULN_PAGE_SIZE_CHANGE:
      return {
        ...state,
        pageSize: action.size
      }
    case types.VULN_PAGE_INDEX_CHANGE:
      return {
        ...state,
        currentPageIndex: action.index
      }
    case types.VULN_IMPORT_CLICK:
      return {
        ...state,
        phaseList: action.payload
      }
    case types.VULN_IMPORT_PHASE_CHANGE:
      return {
        ...state,
        importForm: {
          ...state.importForm,
          phaseId: action.value
        }
      }
    case types.VULN_IMPORT_FILE_CHANGE:
      return {
        ...state,
        importForm: {
          ...state.importForm,
          file: action.value
        }
      }
    case types.VULN_POST_IMPORT_SUCCESS:
      return {
        ...state,
        importForm: initState.importForm,
        importSummary: action.payload,
        errorMessage: initState.errorMessage,
        fieldErrors: initState.fieldErrors
      }
    case types.VULN_POST_IMPORT_FAILED:
      return {
        ...state,
        errorMessage: action.errorMessage,
        fieldErrors: action.fieldErrors
      }
    case types.VULN_IMPORT_CANCEL:
      return {
        ...state,
        importForm: initState.importForm,
        importSummary: initState.importSummary,
        errorMessage: initState.errorMessage,
        fieldErrors: initState.fieldErrors
      }
    case types.VULN_SELECT_ALL_CLICK:
      let selectedRows = { ...state.selectedRows }
      action.rows.forEach(row => {
        selectedRows[row.Id] = action.checked
      });

      return {
        ...state,
        selectedRows
      }
    case types.VULN_SELECT_ROW_CLICK:
      return {
        ...state,
        selectedRows: {
          ...state.selectedRows,
          [action.id]: action.checked
        }
      }
    case types.VULN_SELECTED_ITEM_ACTIONS_CLEAR:
    case types.VULN_SELECTED_ITEM_ACTIONS_CREATE:
      return {
        ...state,
        selectedRows: {}
      }
    case types.VULN_SELECTED_ITEM_ACTIONS_ASSIGN:
      return {
        ...state,
        riskList: action.payload,
        assignForm: initState.assignForm
      }
    case types.VULN_ASSIGN_RISK_CHANGE:
      return {
        ...state,
        assignForm: {
          ...state.assignForm,
          riskId: action.value
        }
      }
    case types.VULN_ASSIGN_RISK_CANCEL:
      return {
        ...state,
        assignForm: initState.assignForm,
        fieldErrors: initState.fieldErrors
      }
    case types.VULN_POST_ASSIGN_RISK_SUCCESS:
      return {
        ...state,
        selectedRows: {},
        assignForm: initState.assignForm,
        fieldErrors: initState.fieldErrors
      }
    case types.VULN_POST_ASSIGN_RISK_FAILED:
      return {
        ...state,
        fieldErrors: action.fieldErrors
      }
    default:
      return state
  }
}

export default vulnerabilityGridReducer
