import configureMockStore from 'redux-mock-store'
import moxios from 'moxios'
import * as endpoints from '../constants/endpoints'
import * as routes from '../constants/routes'
import * as httpStatus from '../constants/http-status-codes'
import * as types from './vulnerability-action-types'
import * as actions from './vulnerability-actions'
import * as chartTypes from '../components/charts/chart-action-types'

const mockStore = configureMockStore()

describe('Vulnerability Actions', () => {
  beforeEach(() => {
    moxios.install()
  })

  afterEach(() => {
    moxios.uninstall()
  })

  it('should dispatch VULN_GET_ITEMS_FETCHING', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_GET_ITEMS_FETCHING }]

    actions.getItems(store.dispatch)('engagementId')

    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_GET_ITEMS_SUCCESS', (done) => {
    const store = mockStore()
    const response = "test"
    const expectedAction = { type: types.VULN_GET_ITEMS_SUCCESS, payload: "test" }

    moxios.stubRequest(endpoints.VULNERABILITIES + '/engagementId', {
      status: httpStatus.OK,
      response
    })

    actions.getItems(store.dispatch)('engagementId')
      .then(() => {
        expect(store.getActions()[1]).toEqual(expectedAction)
        done()
      })
  })

  it('should dispatch VULN_GET_ITEMS_FAILED', (done) => {
    const store = mockStore()
    const response = "test"
    const expectedAction = { type: types.VULN_GET_ITEMS_FAILED, error: "test" }

    moxios.stubRequest(endpoints.VULNERABILITIES + '/engagementId', {
      status: httpStatus.BAD_REQUEST,
      response
    })

    actions.getItems(store.dispatch)('engagementId')
      .then(() => {
        expect(store.getActions()[1]).toEqual(expectedAction)
        done()
      })
  })

  it('getGrid should getVulnerabilityCharts and getItems', () => {
    const store = mockStore()
    const expectedActions = [
      { type: chartTypes.GET_VULNERABILITY_CHARTS_FETCHING },
      { type: types.VULN_GET_ITEMS_FETCHING },
      { type: types.VULN_IMPORT_CANCEL }
    ]
    const table = { fetchRows: jest.fn() }

    actions.getGrid(store.dispatch)('engagementId', table)

    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_GET_FETCHING', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_GET_FETCHING }]

    actions.get(store.dispatch)('engagementId', 'vulnerabilityId')

    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_GET_SUCCESS', (done) => {
    const store = mockStore()
    const response = "test"
    const expectedAction = { type: types.VULN_GET_SUCCESS, payload: "test" }

    moxios.stubRequest(endpoints.VULNERABILITIES + '/engagementId/vulnerabilityId', {
      status: httpStatus.OK,
      response
    })

    actions.get(store.dispatch)('engagementId', 'vulnerabilityId')
      .then(() => {
        expect(store.getActions()[1]).toEqual(expectedAction)
        done()
      })
  })

  it('should dispatch VULN_GET_FAILED', (done) => {
    const store = mockStore()
    const response = "test"
    const expectedAction = { type: types.VULN_GET_FAILED, error: "test" }

    moxios.stubRequest(endpoints.VULNERABILITIES + '/engagementId/vulnerabilityId', {
      status: httpStatus.BAD_REQUEST,
      response
    })

    actions.get(store.dispatch)('engagementId', 'vulnerabilityId')
      .then(() => {
        expect(store.getActions()[1]).toEqual(expectedAction)
        done()
      })
  })

  it('should dispatch VULN_POST_FETCHING', () => {
    const store = mockStore()
    const response = "test"
    const expectedActions = [{ type: types.VULN_POST_FETCHING }]
    const history = []
    const details = {}

    moxios.stubRequest(endpoints.VULNERABILITIES, {
      status: httpStatus.OK,
      response
    })

    actions.update(store.dispatch)(details, history)

    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_POST_SUCCESS and navigate to risk page route', (done) => {
    const store = mockStore()
    const response = "test"
    const expectedAction = { type: types.VULN_POST_SUCCESS, payload: "test" }
    const history = []
    const details = {
      Id: "id",
      EngagementId: "engagement id",
      PhaseId: "phase id",
      ResourceId: "resource id",
      GroupId: "group id",
      RemediationStatusId: "remediation status id",
      MitigationDate: "mitigation date"
    }

    moxios.stubRequest(endpoints.VULNERABILITIES, {
      status: httpStatus.OK,
      response
    })

    actions.update(store.dispatch)(details, history)
      .then(() => {
        let request = moxios.requests.mostRecent()
        expect(request.config.method).toEqual('post')
        expect(request.config.data).toEqual(JSON.stringify(details))
        expect(store.getActions()[1]).toEqual(expectedAction)
        expect(history[0]).toEqual(routes.RISK_PAGE_BASE + routes.VULN_PAGE + '/engagement id')
        done()
      })
  })

  it('should dispatch VULN_POST_FAILED', (done) => {
    const store = mockStore()
    const response = "test"
    const expectedAction = { type: types.VULN_POST_FAILED, validationErrors: "test" }
    const history = []
    const details = {}

    moxios.stubRequest(endpoints.VULNERABILITIES, {
      status: httpStatus.BAD_REQUEST,
      response
    })

    actions.update(store.dispatch)(details, history)
      .then(() => {
        expect(store.getActions()[1]).toEqual(expectedAction)
        done()
      })
  })

  it('should dispatch VULN_RESOURCE_ASSIGN_SAVE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_RESOURCE_ASSIGN_SAVE, resource: "Resource", group: "Group" }]
    actions.assignResource(store.dispatch)('Resource', 'Group')
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_SELECT_MITIGATION_DATE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_SELECT_MITIGATION_DATE, value: 'Value' }]
    actions.handleMitigationDateSelected(store.dispatch)('Value')
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_CHANGE_MITIGATION_DATE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_CHANGE_MITIGATION_DATE, value: 'Value' }]
    actions.handleMitigationDateChange(store.dispatch)('Value')
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_REMEDIATION_STATUS_CHANGE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_REMEDIATION_STATUS_CHANGE, value: 1 }]
    actions.handleRemediationStatusChange(store.dispatch)(1)
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_REMEDIATION_DATE_CLICK', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_REMEDIATION_DATE_CLICK }]
    actions.handleRemediationDateClick(store.dispatch)()
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_REMEDIATION_DATE_CLOSE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_REMEDIATION_DATE_CLOSE }]
    actions.handleRemediationDateClose(store.dispatch)()
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_CLICK_TARGET_REMEDIATION_DATE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_CLICK_TARGET_REMEDIATION_DATE }]
    actions.handleTargetRemediationDateClick(store.dispatch)()
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_CANCEL_TARGET_REMEDIATION_DATE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_CANCEL_TARGET_REMEDIATION_DATE }]
    actions.handleTargetRemediationDateClose(store.dispatch)()
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_SELECT_TARGET_MITIGATION_DATE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_SELECT_TARGET_REMEDIATION_DATE, value: 'Value' }]
    actions.handleTargetRemediationDateSelected(store.dispatch)('Value')
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_CHANGE_TARGET_MITIGATION_DATE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_CHANGE_TARGET_REMEDIATION_DATE, value: 'Value' }]
    actions.handleTargetRemediationDateChange(store.dispatch)('Value')
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_POST_EXPORT_SUCCESS', (done) => {
    window.open = jest.fn()
    const response = {
      sessionKey: 'sessionKey',
      fileName: 'fileName'
    }
    const expectedActions = [
      { type: types.VULN_POST_EXPORT_FETCHING },
      { type: types.VULN_POST_EXPORT_SUCCESS, payload: response }
    ]

    moxios.stubRequest(endpoints.EXPORT_VULNERABILITIES, {
      status: httpStatus.OK,
      response
    })

    const event = {
      engagementId: 'engagementId',
      idList: 'idList',
      option: 'option'
    }

    const store = mockStore()
    actions.handleExport(store.dispatch)(event)
      .then((r) => {
        let request = moxios.requests.mostRecent()
        expect(request.config.method).toEqual('post')
        expect(request.config.data).toEqual(JSON.stringify({
          EngagementId: event.engagementId,
          IdList: event.idList,
          Option: event.option
        }))
        expect(store.getActions()).toEqual(expectedActions)
        expect(window.open).toHaveBeenCalledWith(endpoints.EXPORT_CSV + '/sessionKey/fileName', '_self')
        done()
      })
  })

  it('should dispatch VULN_POST_EXPORT_FAILED', (done) => {
    const response = { data: 'error' }
    const expectedActions = [
      { type: types.VULN_POST_EXPORT_FETCHING },
      { type: types.VULN_POST_EXPORT_FAILED, error: response }
    ]

    moxios.stubRequest(endpoints.EXPORT_VULNERABILITIES, {
      status: httpStatus.BAD_REQUEST,
      response
    })

    const event = {
      engagementId: 'engagementId',
      idList: 'idList',
      option: 'option'
    }

    const store = mockStore()
    actions.handleExport(store.dispatch)(event)
      .then((r) => {
        let request = moxios.requests.mostRecent()
        expect(request.config.method).toEqual('post')
        expect(request.config.data).toEqual(JSON.stringify({
          EngagementId: event.engagementId,
          IdList: event.idList,
          Option: event.option
        }))
        expect(store.getActions()).toEqual(expectedActions)
        done()
      })
  })

  it('should dispatch VULN_SORT', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_SORT, field: "Field", comparator: "Comparator" }]
    actions.handleSort(store.dispatch)("Field", "Comparator")
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_FILTER', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_FILTER, field: "Field", value: "Value", filter: "Filter" }]
    actions.handleFilter(store.dispatch)("Field", "Value", "Filter")
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_PAGE_SIZE_CHANGE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_PAGE_SIZE_CHANGE, size: "Size" }]
    actions.handlePageSizeChange(store.dispatch)("Size")
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_PAGE_INDEX_CHANGE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_PAGE_INDEX_CHANGE, index: "Index" }]
    actions.handlePageIndexChange(store.dispatch)("Index")
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_EXPORT_DROPDOWN_CLICK', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_EXPORT_DROPDOWN_CLICK }]
    actions.handleExportDropdownClick(store.dispatch)()
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_EXPORT_DROPDOWN_MOUSE_LEAVE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_EXPORT_DROPDOWN_MOUSE_LEAVE }]
    actions.handleExportDropdownMouseLeave(store.dispatch)()
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_IMPORT_CLICK', (done) => {
    const store = mockStore()
    const response = "test"
    const expectedActions = [{ type: types.VULN_IMPORT_CLICK, payload: "test" }]

    moxios.stubRequest(endpoints.PHASES + '/engagementId', {
      status: httpStatus.OK,
      response
    })

    actions.handleImportClick(store.dispatch)('engagementId')
      .then(() => {
        expect(store.getActions()).toEqual(expectedActions)
        done()
      })
  })

  it('should dispatch VULN_IMPORT_PHASE_CHANGE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_IMPORT_PHASE_CHANGE, value: "Value" }]
    actions.handleImportPhaseChange(store.dispatch)("Value")
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_IMPORT_FILE_CHANGE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_IMPORT_FILE_CHANGE, value: "Value" }]
    actions.handleImportFileChange(store.dispatch)("Value")
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_POST_IMPORT_FETCHING', () => {
    const store = mockStore()
    const response = "test"
    const expectedActions = [{ type: types.VULN_POST_IMPORT_FETCHING }]
    const form = {}
    const table = { fetchRows: jest.fn() }

    moxios.stubRequest(endpoints.IMPORT_VULNERABILITIES, {
      status: httpStatus.OK,
      response
    })

    actions.handleImportSave(store.dispatch)('engagementId', form, table)

    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_POST_IMPORT_SUCCESS and then getItems', (done) => {
    const store = mockStore()
    const response = "test"
    const expectedAction = { type: types.VULN_POST_IMPORT_SUCCESS, payload: "test" }
    const form = {
      phaseId: "phase id",
      file: "file data"
    }
    const table = { fetchRows: jest.fn() }

    moxios.stubRequest(endpoints.IMPORT_VULNERABILITIES, {
      status: httpStatus.OK,
      response
    })

    actions.handleImportSave(store.dispatch)('engagementId', form, table)
      .then(() => {
        let importRequest = moxios.requests.at(2)
        expect(importRequest.config.method).toEqual("post")
        expect(importRequest.config.data.get("EngagementId")).toEqual("engagementId")
        expect(importRequest.config.data.get("PhaseId")).toEqual("phase id")
        expect(importRequest.config.data.get("File")).toEqual("file data")
        expect(store.getActions()[1]).toEqual(expectedAction)

        let getItemsRequest = moxios.requests.at(1)
        expect(getItemsRequest.config.method).toEqual("get")
        expect(getItemsRequest.config.url).toEqual(endpoints.VULNERABILITIES + "/engagementId")

        let getChartsRequest = moxios.requests.at(0)
        expect(getChartsRequest.config.method).toEqual("get")
        expect(getChartsRequest.config.url).toEqual(endpoints.DASHBOARD + "/engagementId")
        done()
      }).catch(e => console.log(e))
  })

  it('should dispatch VULN_POST_IMPORT_FAILED with error message', async () => {
    const store = mockStore()
    const response = "test"
    const expectedAction = { type: types.VULN_POST_IMPORT_FAILED, errorMessage: "test", fieldErrors: {} }
    const form = {}
    const table = { fetchRows: jest.fn() }

    moxios.stubRequest(endpoints.IMPORT_VULNERABILITIES, {
      status: httpStatus.BAD_REQUEST,
      response
    })

    await actions.handleImportSave(store.dispatch)('engagementId', form , table)
      .catch(() => {
        expect(store.getActions()[1]).toEqual(expectedAction)
      })
  })

  it('should dispatch VULN_POST_IMPORT_FAILED with field error', async () => {
    const store = mockStore()
    const response = { field: "message" }
    const expectedAction = { type: types.VULN_POST_IMPORT_FAILED, errorMessage: "", fieldErrors: response }
    const form = {}
    const table = { fetchRows: jest.fn() }

    moxios.stubRequest(endpoints.IMPORT_VULNERABILITIES, {
      status: httpStatus.BAD_REQUEST,
      response
    })

    await actions.handleImportSave(store.dispatch)('engagementId', form, table)
      .catch(() => {
        expect(store.getActions()[1]).toEqual(expectedAction)
      })
  })

  it('should dispatch VULN_IMPORT_CANCEL', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_IMPORT_CANCEL }]
    actions.handleImportCancel(store.dispatch)()
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_IMPORT_SUMMARY_CLOSE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_IMPORT_SUMMARY_CLOSE }]
    actions.handleImportSummaryClose(store.dispatch)()
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_SELECT_ALL_CLICK', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_SELECT_ALL_CLICK, checked: 'Checked', rows: 'Rows' }]
    actions.handleSelectAll(store.dispatch)('Checked', 'Rows')
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_SELECT_ROW_CLICK', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_SELECT_ROW_CLICK, checked: 'Checked', id: 'Id', rows: 'Rows' }]
    actions.handleSelectRow(store.dispatch)('Checked', 'Id', 'Rows')
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_SELECTED_ITEM_ACTIONS_DROPDOWN_CLICK', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_SELECTED_ITEM_ACTIONS_DROPDOWN_CLICK }]
    actions.handleSelectedItemActionsDropdownClick(store.dispatch)()
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_SELECTED_ITEM_ACTIONS_DROPDOWN_MOUSE_LEAVE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_SELECTED_ITEM_ACTIONS_DROPDOWN_MOUSE_LEAVE }]
    actions.handleSelectedItemActionsDropdownMouseLeave(store.dispatch)()
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_SELECTED_ITEM_ACTIONS_CLEAR', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_SELECTED_ITEM_ACTIONS_CLEAR }]
    actions.handleSelectedItemActionsClear(store.dispatch)()
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_SELECTED_ITEM_ACTIONS_CREATE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_SELECTED_ITEM_ACTIONS_CREATE }]
    const items = ['a','b','c']
    const history = { push: jest.fn() }
    actions.handleSelectedItemActionsCreate(store.dispatch)(items, history, 'engagementId')
    expect(store.getActions()).toEqual(expectedActions)
    expect(history.push).toHaveBeenCalledWith({
      pathname: routes.RISK_PAGE_BASE + routes.RISK_PAGE + "/engagementId/0",
      state: { vulnerabilityList: items }
    })
  })

  it('should dispatch VULN_SELECTED_ITEM_ACTIONS_ASSIGN', (done) => {
    const store = mockStore()
    const response = [
      { Phase: "phase1", Id: "id1", Name: "name1" },
      { Phase: "phase2", Id: "id2", Name: "name2" },
      { Phase: "phase1", Id: "id3", Name: "name3" },
    ]
    const expectedActions = [{
      type: types.VULN_SELECTED_ITEM_ACTIONS_ASSIGN,
      payload: {
        phase1: [
          { Phase: "phase1", Id: "id1", Name: "name1" },
          { Phase: "phase1", Id: "id3", Name: "name3" }
        ],
        phase2: [
          { Phase: "phase2", Id: "id2", Name: "name2" }
        ]
      }
    }]

    moxios.stubRequest(endpoints.RISKS + '/engagementId', {
      status: httpStatus.OK,
      response
    })

    actions.handleSelectedItemActionsAssign(store.dispatch)('engagementId')
      .then(() => {
        expect(store.getActions()).toEqual(expectedActions)
        done()
      })
  })

  it('should dispatch VULN_ASSIGN_RISK_CHANGE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_ASSIGN_RISK_CHANGE, value: 'Value' }]
    actions.handleAssignRiskChange(store.dispatch)('Value')
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_ASSIGN_RISK_CANCEL', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_ASSIGN_RISK_CANCEL }]
    actions.handleAssignRiskCancel(store.dispatch)()
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_POST_ASSIGN_RISK_FETCHING', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_POST_ASSIGN_RISK_FETCHING }]
    const form = {
      riskId: 'id'
    }
    const riskList = {
      phase: [
        { Id: 'id', Name: 'name', Phase: 'phase', VulnerabilityList: [] }
      ]
    }
    const selectedVulnerabilities = []

    moxios.stubRequest(endpoints.RISKS, {
      status: httpStatus.OK,
      response: "test"
    })

    actions.handleAssignRiskSave(store.dispatch)(form, riskList, selectedVulnerabilities)

    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_POST_ASSIGN_RISK_SUCCESS and then getGrid', (done) => {
    const store = mockStore()
    const expectedAction = { type: types.VULN_POST_ASSIGN_RISK_SUCCESS }
    const form = {
      riskId: "riskId"
    }
    const riskList = {
      phaseId: [{
        Id: 'riskId',
        EngagementId: 'engagementId',
        ImportedDate: 'importedDate',
        ImportedBy: 'importedBy',
        Name: 'name',
        PhaseId: 'phaseId',
        ResourceId: 'resourceId',
        GroupId: 'groupId',
        InherentRisk: 'inherentRisk',
        Likelihood: 'likelihood',
        Description: 'description',
        Recommendation: 'recommendation',
        RemediationStatusId: 'remediationStatusId',
        MitigationDate: 'mitigationDate',
        MitigationStatusId: 'mitigationStatusId',
        AffectedSystemsCount: 'affectedSystemsCount',
        PossibleAffectedSystemsCount: 'possibleAffectedSystemsCount',
        Effectiveness: 'effectiveness',
        ControlEffectiveness: 'controlEffectiveness',
        Impact: 'impact',
        RiskScore: 'riskScore',
        References: 'references',
        VulnerabilityList: ['pre-existing']
      }]
    }
    const selectedVulnerabilities = ['newly-assigned']
    const table = { fetchRows: jest.fn() }

    moxios.stubRequest(endpoints.RISKS, {
      status: httpStatus.OK,
      response: "test"
    })

    actions.handleAssignRiskSave(store.dispatch)(form, riskList, selectedVulnerabilities, table)
      .then(() => {
        let assignRequest = moxios.requests.at(0)
        expect(assignRequest.config.method).toEqual("post")
        expect(assignRequest.config.data).toEqual(JSON.stringify({
          ...riskList['phaseId'][0],
          VulnerabilityList: ["pre-existing", "newly-assigned"]
        }))
        expect(store.getActions()[1]).toEqual(expectedAction)

        let getChartsRequest = moxios.requests.at(1)
        expect(getChartsRequest.config.method).toEqual("get")
        expect(getChartsRequest.config.url).toEqual(endpoints.DASHBOARD + "/engagementId")

        let getItemsRequest = moxios.requests.at(2)
        expect(getItemsRequest.config.method).toEqual("get")
        expect(getItemsRequest.config.url).toEqual(endpoints.VULNERABILITIES + "/engagementId")
        done()
      }).catch(e => console.log(e))
  })

  it('should dispatch VULN_POST_ASSIGN_RISK_FAILED with error message', (done) => {
    const store = mockStore()
    const expectedAction = { type: types.VULN_POST_ASSIGN_RISK_FAILED, fieldErrors: { RiskId: ["Required"] } }
    const form = { riskId: '' }
    const riskList = {
      phase: [
        { Id: 'id', Name: 'name', Phase: 'phase', VulnerabilityList: [] }
      ]
    }
    const selectedVulnerabilities = []

    moxios.stubRequest(endpoints.RISKS, {
      status: httpStatus.OK,
      response: "test"
    })

    actions.handleAssignRiskSave(store.dispatch)(form, riskList, selectedVulnerabilities)
      .then(() => {
        expect(store.getActions()[1]).toEqual(expectedAction)
        done()
      })
  })

  it('should dispatch VULN_POST_ASSIGN_RISK_FAILED with field error', (done) => {
    const store = mockStore()
    const response = { field: "message" }
    const expectedAction = { type: types.VULN_POST_ASSIGN_RISK_FAILED, fieldErrors: response }
    const form = { riskId: 'id' }
    const riskList = {
      phase: [
        { Id: 'id', Name: 'name', Phase: 'phase', VulnerabilityList: [] }
      ]
    }
    const selectedVulnerabilities = []

    moxios.stubRequest(endpoints.RISKS, {
      status: httpStatus.BAD_REQUEST,
      response
    })

    actions.handleAssignRiskSave(store.dispatch)(form, riskList, selectedVulnerabilities)
      .then(() => {
        expect(store.getActions()[1]).toEqual(expectedAction)
        done()
      })
  })

  it('should dispatch VULN_HOSTS_SORT', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_HOSTS_SORT, field: "Field", comparator: "Comparator" }]
    actions.handleHostsSort(store.dispatch)("Field", "Comparator")
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_HOSTS_FILTER', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_HOSTS_FILTER, field: "Field", value: "Value", filter: "Filter" }]
    actions.handleHostsFilter(store.dispatch)("Field", "Value", "Filter")
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_HOSTS_PAGE_SIZE_CHANGE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_HOSTS_PAGE_SIZE_CHANGE, size: "Size" }]
    actions.handleHostsPageSizeChange(store.dispatch)("Size")
    expect(store.getActions()).toEqual(expectedActions)
  })

  it('should dispatch VULN_HOSTS_PAGE_INDEX_CHANGE', () => {
    const store = mockStore()
    const expectedActions = [{ type: types.VULN_HOSTS_PAGE_INDEX_CHANGE, index: "Index" }]
    actions.handleHostsPageIndexChange(store.dispatch)("Index")
    expect(store.getActions()).toEqual(expectedActions)
  })
  
})
