import React from 'react'
import * as routes from '../constants/routes'
import * as endpoints from '../constants/endpoints'
import Pager from '../components/table/pager'
import TableView, {
  CheckboxCell,
  IconLinkCell,
  TextCell,
  PlainHeader,
  SortableHeader,
  TextFilterHeader,
  ThreatLevelFilterHeader,
  stringComparator,
  numberComparator,
  dateComparator,
  textFilter,
  equalsFilter,
  TotalCount
} from '../components/table'
import {
  ColumnChart
} from '../components/charts'
import { SecureExportButton as ExportButton}  from '../components/buttons/export-button'
import { SecureHistoryButton as HistoryButton} from '../components/buttons/history-button' 
import './vulnerability-grid.css'

class VulnerabilityGrid extends React.Component {

  createEvent(value) {
    return { target: { value } }
  }

  getSelectedItems() {
    if (!this.props.selectedRows)
      return []
    return this.props.table.rows.filter(row => this.props.selectedRows[row.Id])
  }

  getPage(rows) {
    var startIndex = this.props.currentPageIndex * this.props.pageSize
    var endIndex = startIndex + (this.props.pageSize)
    return rows.slice(startIndex, endIndex)
  }

  clearFilters() {
    this.props.table.handleFilterChange("Title", textFilter)(this.createEvent(''))
    this.props.table.handleFilterChange("Phase", textFilter)(this.createEvent(''))
    this.props.table.handleFilterChange("Severity", textFilter)(this.createEvent(''))
    this.props.table.handleFilterChange("VulnerabilityCategory", textFilter)(this.createEvent(''))
    this.props.table.handleFilterChange("Risk", textFilter)(this.createEvent(''))
    this.props.table.handleFilterChange("RemediationResource", textFilter)(this.createEvent(''))
    this.props.table.handleFilterChange("MitigationDate", textFilter)(this.createEvent(''))
    this.props.table.handleFilterChange("Hosts", textFilter)(this.createEvent(''))
  }

  componentWillMount() {
    this.props.actions.initGridState('vulnerability')();
  }

  render() {
    const props = this.props

    return (
      <div className='container-fluid'>
        <div className="row">
          <ColumnChart
            id="vulnerabilities-chart"
            className="col-md-12"
            title="Vulnerabilities by Category"
            subtitle="Click the columns to apply category and severity filter below"
            yTitle="Vulnerabilities"
            height="300"
            legend={true}
            chart={props.charts.vulnerabilityChart}
            onClick={(e) => {
              this.clearFilters()
              props.table.handleFilterChange("VulnerabilityCategory", equalsFilter)(this.createEvent(e.point.name))
              props.table.handleFilterChange("Severity", equalsFilter)(this.createEvent(e.point.series.name))
            }}
          />
        </div>

        <hr />

        <div className="table-btn-action">
          <TotalCount
            totalRowCount={props.table.filteredAndSorted.length}
            id='vulnerabilities-total'
            label={'Total vulnerabilities'}
            containerClassName=''
          />

          <ExportButton
            entitlement={props.entitlements['Export']}
            exportURL={endpoints.EXPORT_VULNERABILITIES}
            ids={props.table.page.map(r=>r.Id)}
            engagementId={props.engagementId}
            name='Vulnerabilities'
          />

          <HistoryButton
            entitlement={props.entitlements['History']}
            visible={props.allVulns && props.activeVulns && props.allVulns.length !== props.activeVulns.length}
            showHistory={!props.showHistory}
            onClick={() => props.actions.handleHistoryButtonToggle('vulnerability')(props.showHistory)}
          />

          {
            Number.isInteger(props.entitlements["Assign"]) &&
            this.getSelectedItems().length > 0 &&
            <div className="pull-right">
              <div
                id="vulnerabilitySelectedItemActionsDiv"
                className={"btn-group btn-group-actions" + (props.ui.selectedItemActionsDropdownIsOpen ? " open" : "") + (props.ui.assignRiskFormIsVisible ? " hidden" : "")}
              >
                <button
                  id="vulnerabilitySelectedItemActionsButton"
                  type="button"
                  className="btn btn-primary btn-dropdown dropdown-toggle"
                  onClick={() => props.actions.handleSelectedItemActionsDropdownClick()}
                >
                  <i className="fa fa-caret-down pull-right" />
                  <span className="pull-left">
                    <span className="badge">{this.getSelectedItems().length}</span> Selected
                  </span>
                </button>
                <ul
                  className="dropdown-menu"
                  onMouseLeave={() => props.actions.handleSelectedItemActionsDropdownMouseLeave()}
                >
                  <li>
                    <a
                      id="vulnerabilitySelectedItemsClear"
                      className="cursor-pointer"
                      onClick={() => props.actions.handleSelectedItemActionsClear()}
                    >
                      Clear Selected
                    </a>
                  </li>
                  <li>
                    <a
                      id="vulnerabilitySelectedItemsCreateRisk"
                      className="cursor-pointer"
                      onClick={() => props.actions.handleSelectedItemActionsCreate(this.getSelectedItems(), props.history, props.engagementId)}
                    >
                      Create a New Risk
                    </a>
                  </li>
                  <li>
                    <a
                      id="vulnerabilitySelectedItemsAssignRisk"
                      className="cursor-pointer"
                      onClick={() => props.actions.handleSelectedItemActionsAssign(props.engagementId)}
                    >
                      Assign to Existing
                    </a>
                  </li>
                </ul>
              </div>

              <form
                id="vulnerabilityAssignRiskForm"
                className={"form-inline" + (props.ui.assignRiskFormIsVisible ? "" : " hidden")}>
                <div className={"form-group" + (props.fieldErrors["RiskId"] ? " has-error" : "")}>
                  <label className="control-label" htmlFor="assign-risk-select">Risk</label>
                  <select
                    id="assign-risk-select"
                    className="form-control"
                    value={props.assignForm.riskId}
                    onChange={(e) => props.actions.handleAssignRiskChange(e.target.value)}
                  >
                    <option value="">Select</option>
                    {
                      Object.keys(props.riskList).sort().map((phase, i) => {
                        return (
                          <optgroup key={i} label={phase}>
                            {props.riskList[phase].map((risk, j) => <option key={j} value={risk.Id}>{risk.Name}</option>)}
                          </optgroup>
                        )
                      })
                    }
                  </select>
                </div>
                <button
                  id="vulnerabilityAssignRiskSaveButton"
                  type="button"
                  className="btn btn-default"
                  onClick={() => props.actions.handleAssignRiskSave(props.assignForm, props.riskList, this.getSelectedItems(), props.table)}
                >
                  Assign
                </button>
                <button
                  id="vulnerabilityAssignRiskCancelButton"
                  type="button"
                  className="btn btn-alternate"
                  onClick={() => props.actions.handleAssignRiskCancel()}
                >
                  Cancel
                </button>
              </form>
            </div>
          }

          {
            Number.isInteger(props.entitlements["Import"]) &&
            this.getSelectedItems().length === 0 &&
            <div className="pull-right">
              <button
                id="vulnerabilityImportButton"
                type="button"
                className={"btn btn-primary" + (props.ui.importButtonIsVisible ? "" : " hidden")}
                onClick={() => props.actions.handleImportClick(props.engagementId)}
              >
                <span className="pull-right">Import</span>
                <i className="fa fa-plus pull-left"></i>
              </button>

              <form
                id="vulnerabilityImportForm"
                className={"form-inline" + (props.ui.importFormIsVisible ? "" : " hidden")}>
                <div className={"form-group" + (props.fieldErrors["PhaseId"] ? " has-error" : "")}>
                  <label className="control-label" htmlFor="import-phase-select">Phase</label>
                  <select
                    id="import-phase-select"
                    className="form-control"
                    value={props.importForm.phaseId}
                    onChange={(e) => props.actions.handleImportPhaseChange(e.target.value)}
                  >
                    <option value="">Select</option>
                    {
                      props.phaseList.map((phase, index) => {
                        return (
                          <option key={index} value={phase.Id}>{phase.Name}</option>
                        )
                      })
                    }
                  </select>
                </div>
                <div className={"form-group" + (props.fieldErrors["FileName"] ? " has-error" : "")}>
                  <label className="control-label" htmlFor="import-file-input">Import CSV</label>
                  <input
                    id="import-file-input"
                    type="file"
                    className="form-control"
                    onChange={(e) => props.actions.handleImportFileChange(e.target.files[0])}
                  />
                </div>
                <button
                  id="vulnerabilityImportSaveButton"
                  type="button"
                  className="btn btn-default"
                  onClick={() => props.actions.handleImportSave(props.engagementId, props.importForm, props.table)}
                >
                  Save
                </button>
                <button
                  id="vulnerabilityImportCancelButton"
                  type="button"
                  className="btn btn-alternate"
                  onClick={() => props.actions.handleImportCancel()}
                >
                  Cancel
                </button>
              </form>

              <span
                id="import-processing-span"
                className={"help-block" + (props.ui.importProcessing ? "" : " hidden")}
              >
                <i className="fa fa-spinner fa-2x fa-spin" />
                Importing Vulnerabilities
              </span>

              <div
                id="import-summary-div"
                className={(props.ui.importSummaryIsVisible ? "" : "hidden")}
              >
                <button
                  id="vulnerabilityImportSummaryCloseButton"
                  type="button"
                  className="btn-link pull-right"
                  onClick={() => props.actions.handleImportSummaryClose()}>
                  <i className="fa fa-close" />
                </button>
                <span
                  id="import-summary-result-span"
                  className={"help-block pull-right" + (props.ui.importFailed ? " hidden" : "")}
                >
                  Imported {props.importSummary.VulnerabilityCount} Vulnerabilities and updated {props.importSummary.UpdatedVulnerabilityCount}.
                Imported {props.importSummary.HostCount} Hosts and updated {props.importSummary.UpdatedHostCount}.
                </span>
                <span
                  id="import-summary-error-span"
                  className={"help-block pull-right text-danger" + (props.ui.importFailed ? "" : " hidden")}
                >
                  {props.errorMessage}
                  {props.fieldErrors['PhaseId'] && props.fieldErrors['PhaseId'].map(m => m + " ")}
                  {props.fieldErrors['FileName'] && props.fieldErrors['FileName'].map(m => m + ". ")}
                </span>
              </div>
            </div>
          }

          <div className="clearfix"></div>
        </div>

        <hr />

        { props.isFetching &&
          <div>
            <p className="text-center">
              <i className="fa fa-5x fa-circle-o-notch fa-spin" />
            </p>
          </div>
        }
        { !props.isFetching &&
          <div>
            <TableView
              headers={[
                {
                  component: PlainHeader,
                  props: {
                    title: '',
                  }
                },
                {
                  component: SortableHeader,
                  props: {
                    title: 'Title',
                    sort: props.table.sort['Title'],
                    onClick: props.table.handleSort('Title', stringComparator),
                    width: '380px'
                  }
                },
                {
                  component: SortableHeader,
                  props: {
                    title: 'Phase',
                    sort: props.table.sort['Phase'],
                    onClick: props.table.handleSort('Phase', stringComparator),
                    width: '140px'
                  }
                },
                {
                  component: SortableHeader,
                  props: {
                    title: 'Severity',
                    sort: props.table.sort['CVSSScore'],
                    onClick: props.table.handleSort('CVSSScore', numberComparator)
                  }
                },
                {
                  component: SortableHeader,
                  props: {
                    title: 'Category',
                    sort: props.table.sort['VulnerabilityCategory'],
                    onClick: props.table.handleSort('VulnerabilityCategory', stringComparator),
                    width: '165px'
                  }
                },
                {
                  component: SortableHeader,
                  props: {
                    title: 'Risk',
                    sort: props.table.sort['Risk'],
                    onClick: props.table.handleSort('Risk', stringComparator)
                  }
                },
                {
                  component: SortableHeader,
                  props: {
                    title: 'Resource',
                    sort: props.table.sort['RemediationResource'],
                    onClick: props.table.handleSort('RemediationResource', dateComparator)
                  }
                },
                {
                  component: SortableHeader,
                  props: {
                    title: "Hosts",
                    sort: props.table.sort['HostListCount'],
                    onClick: props.table.handleSort('HostListCount', numberComparator)
                  }
                }
              ]}

              filters={[
                { component: TextFilterHeader, props: { value: null } },
                {
                  component: TextFilterHeader,
                  props: {
                    onChange: props.table.handleFilterChange('Title', textFilter),
                    value: props.table.filters['Title'] ? props.table.filters['Title'].value : ''
                  }
                },
                {
                  component: TextFilterHeader,
                  props: {
                    onChange: props.table.handleFilterChange('Phase', textFilter),
                    value: props.table.filters['Phase'] ? props.table.filters['Phase'].value : ''
                  }
                },
                {
                  component: ThreatLevelFilterHeader,
                  props: {
                    onChange: props.table.handleFilterChange('Severity', equalsFilter),
                    value: props.table.filters['Severity'] ? props.table.filters['Severity'].value : ''
                  }
                },
                {
                  component: TextFilterHeader,
                  props: {
                    onChange: props.table.handleFilterChange('VulnerabilityCategory', textFilter),
                    value: props.table.filters['VulnerabilityCategory'] ? props.table.filters['VulnerabilityCategory'].value : ''
                  }
                },
                {
                  component: TextFilterHeader,
                  props: {
                    onChange: props.table.handleFilterChange('Risk', textFilter),
                    value: props.table.filters['Risk'] ? props.table.filters['Risk'].value : ''
                  }
                },
                {
                  component: TextFilterHeader,
                  props: {
                    onChange: props.table.handleFilterChange('RemediationResource', textFilter),
                    value: props.table.filters['RemediationResource'] ? props.table.filters['RemediationResource'].value : ''
                  }
                },
                {
                  component: TextFilterHeader,
                  props: {
                    onChange: props.table.handleFilterChange('HostListCount', textFilter),
                    value: props.table.filters['HostListCount'] ? props.table.filters['HostListCount'].value : ''
                  }
                }
              ]}

              cells={row => ([
                {
                  component: CheckboxCell,
                  props: {
                    rowIndex: row.id,
                    checked: props.selectedRows[row.Id],
                    onChange: (e) => props.actions.handleSelectRow(e.target.checked, row.Id, this.getPage(props.table.filteredAndSorted)),
                    visible: !row.IsHistorical
                  }
                },
                {
                  component: IconLinkCell,
                  props: {
                    item: row,
                    col: {
                      field: 'Title',
                      getPath: () => `${routes.RISK_PAGE_BASE}${routes.VULN_PAGE}/${props.engagementId}/${row.PhaseId}/${row.Id}` 
                    },
                    iconClassName: 'fa fa-circle ' + (row.Severity ? row.Severity.replace(' ', '-') : ''),
                    hasTag: row.IsHistorical,
                    tagLabel: 'Remediated',
                    tagClassName: 'remediated-tag'
                  }
                },
                {
                  component: TextCell,
                  props: {
                    item: row,
                    col: { field: 'Phase' },
                    isEmphatic: row.IsHistorical
                  }
                },
                {
                  component: TextCell,
                  props: {
                    item: row,
                    col: { field: 'Severity' },
                    isEmphatic: row.IsHistorical
                  }
                },
                {
                  component: TextCell,
                  props: {
                    item: row,
                    col: { field: 'VulnerabilityCategory' },
                    isEmphatic: row.IsHistorical
                  }
                },
                {
                  component: TextCell,
                  props: {
                    item: row,
                    col: { field: 'Risk' },
                    isEmphatic: row.IsHistorical
                  }
                },
                {
                  component: TextCell,
                  props: {
                    item: row,
                    col: { field: 'RemediationResource' },
                    isEmphatic: row.IsHistorical
                  }
                },
                {
                  component: TextCell,
                  props: {
                    item: row,
                    col: { field: 'HostListCount' },
                    isEmphatic: row.IsHistorical
                  }
                }
              ])}
              page={props.table.page}
            />
                  
            <Pager {...props.table} totalRowCount={props.table.filteredAndSorted.length} />
          </div>
          }

      </div> 
    )
  }
}

VulnerabilityGrid.propTypes = {
}

export default VulnerabilityGrid
