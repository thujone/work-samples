import React from 'react'
import { shallow } from 'enzyme'
import VulnerabilityGrid from './vulnerability-grid'
import TableView, {
  SortableHeader,
  TextFilterHeader,
  TotalCount,
  CheckboxCell,
  IconLinkCell,
  TextCell,
  CheckboxHeader,
  equalsFilter
} from '../components/table'
import {
  ColumnChart
} from '../components/charts'

describe("Vulnerability Grid", () => {
  let props

  beforeEach(() => {
    props = {
      engagementId: 'engagementId',
      charts: {
        vulnerabilityChart: { value: 'vulnerabilityChart' }
      },
      table: {
        currentPageIndex: 0,
        page: [
          { Id: "5000", EngagementId: "5", PhaseId: "3"},
          { Id: "5001", EngagementId: "5", PhaseId: "3"}
        ],
        pageSize: 10,
        sort: {},
        totalRowCount: 2,
        filters: {},
        filteredAndSorted: [
          { Id: "5000", EngagementId: "5", PhaseId: "3"},
          { Id: "5001", EngagementId: "5", PhaseId: "3"}
        ],
        phaseList: [],
        fetchRows: jest.fn(),
        handleSort: jest.fn(),
        handleFilterChange: jest.fn(),
        handlePageChange: jest.fn().mockReturnValue('handlePageChange'),
        handlePageSize: jest.fn().mockReturnValue('handlePageSize'),
        handleExportDropdownClick: jest.fn(),
        handleExportDropdownMouseLeave: jest.fn(),
        handleExport: jest.fn(),
        handleSelectAll: jest.fn(),
        handleSelectRow: jest.fn()
      },
      ui: {},
      entitlements: {
        Remove: 0
      }
    }
  })

  it('should render total vulnerability count', () => {
    const subject = shallow(<VulnerabilityGrid {...props} />)

    const element = subject.find(TotalCount)
    expect(element.props().totalRowCount).toEqual(2)
    expect(element.props().id).toEqual("vulnerabilities-total")
    expect(element.props().label).toEqual("Total vulnerabilities")

  })

  it('should pass titles to column headers', () => {
    const subject = shallow(<VulnerabilityGrid {...props} />)
    const headers = subject.find(TableView).props().headers
    const titles = headers.map(h => h.props.title)
    expect(titles).toEqual(
      [
        undefined,  // First column is a checkbox header
        'Title',
        'Phase',
        'Severity',
        'Category',
        'Risk',
        'Resource',
        'Hosts'
      ]
    )
  })

  it('should pass sort objects to headers', () => {
    props.table.sort = {
      Name: { direction: 'desc', comparator: () => 0 },
      Phase: { direction: 'desc', comparator: () => 0 },
      ScoreSeverity: { direction: 'desc', comparator: () => 0 },
      ImpactSeverity: { direction: 'desc', comparator: () => 0 },
      LikelihoodSeverity: { direction: 'desc', comparator: () => 0 },
      RemediationStatus: { direction: 'desc', comparator: () => 0 },
      RemediationResource: { direction: 'desc', comparator: () => 0 },
      Hosts: { direction: 'desc', comparator: () => 0 }
    }
    const subject = shallow(<VulnerabilityGrid {...props} />)
    const headers = subject.find(SortableHeader)
    headers.forEach(header => {
      expect(header.props().sort.direction).toEqual('desc')
    })
  })

  it('should pass sort handleSort to sort headers', () => {
    const subject = shallow(<VulnerabilityGrid {...props} />)
    const headers = subject.find(SortableHeader)
    headers.forEach(header => {
      header.props().onClick()
    })
    expect(props.table.handleSort).toHaveBeenCalledTimes(7)
  })

  it('should pass handleFilter to filter headers', () => {
    const subject = shallow(<VulnerabilityGrid {...props} />)
    const headers = subject.find(TextFilterHeader)
    headers.forEach(header => {
      header.simulate('change', { target: { value: 1 } })
    })
    expect(props.table.handleFilterChange).toHaveBeenCalledTimes(7)
  })

  it('should render chart for vulnerabilities by category', () => {
    const subject = shallow(<VulnerabilityGrid {...props} />).find(ColumnChart)
    expect(subject.props().id).toEqual("vulnerabilities-chart")
    expect(subject.props().title).toEqual("Vulnerabilities by Category")
    expect(subject.props().subtitle).toEqual("Click the columns to apply category and severity filter below")
    expect(subject.props().className).toEqual("col-md-12")
    expect(subject.props().height).toEqual("300")
    expect(subject.props().yTitle).toEqual("Vulnerabilities")
    expect(subject.props().chart.value).toEqual("vulnerabilityChart")
  })

/*
  it('should handle export dropdown button on click', () => {
    props.entitlements['Export'] = 0
    props.ui.exportDropdownIsOpen = false

    let subject = shallow(<VulnerabilityGrid {...props} />)
    subject.find('#vulnerabilityExportButton').simulate('click')
    expect(props.table.handleExportDropdownClick).toHaveBeenCalled()
  })

  it('should render export dropdown menu closed when props.ui.exportDropdownIsOpen equals false', () => {
    props.entitlements['Export'] = 0
    props.ui.exportDropdownIsOpen = false

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilityExportDiv').props().className).toEqual('btn-group pull-left btn-group-export')
  })

  it('should render export dropdown menu open when props.ui.exportDropdownIsOpen equals true', () => {
    props.entitlements['Export'] = 0
    props.ui.exportDropdownIsOpen = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilityExportDiv').props().className).toEqual('btn-group pull-left btn-group-export open')

    let dropdown = subject.find('.btn-group-export ul.dropdown-menu')
    expect(dropdown.find('a.cursor-pointer').at(0).text()).toEqual('All Vulnerabilities')
    expect(dropdown.find('a.cursor-pointer').at(1).text()).toEqual('Current Page')
  })

  it('should handle export dropdown menu on mouse leave', () => {
    props.entitlements['Export'] = 0
    props.ui.exportDropdownIsOpen = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    subject.find('.btn-group-export ul.dropdown-menu').simulate('mouseleave')
    expect(props.actions.handleExportDropdownMouseLeave).toHaveBeenCalled()
  })

  it('should handle export dropdown menu export all option on click', () => {
    props.entitlements['Export'] = 0
    let subject = shallow(<VulnerabilityGrid {...props} />)

    let element = subject.find('#vulnerabilityExportAll')
    element.simulate('click')

    const expected = {
      engagementId: props.engagementId,
      option: 'All',
      idList: []
    }
    expect(props.actions.handleExport).toHaveBeenCalledWith(expected)
  })

  it('should handle export dropdown menu export current page option on click', () => {
    props.entitlements['Export'] = 0
    let subject = shallow(<VulnerabilityGrid {...props} />)

    let element = subject.find('#vulnerabilityExportCurrentPage')
    element.simulate('click')

    const expected = {
      engagementId: props.engagementId,
      option: 'Filtered',
      idList: ['7', '8']
    }
    expect(props.actions.handleExport).toHaveBeenCalledWith(expected)
  })

  it('should not render export dropdown', () => {
    props.entitlements['Export'] = null

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilityExportDiv').length).toEqual(0)
  })

  it('should render import button hidden when props.ui.importButtonIsVisible equals false', () => {
    props.entitlements['Import'] = 0
    props.ui.importButtonIsVisible = false

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilityImportButton').props().className).toEqual("btn btn-primary hidden")
  })

  it('should render import button visible when props.ui.importButtonIsVisible equals true', () => {
    props.entitlements['Import'] = 0
    props.ui.importButtonIsVisible = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilityImportButton').props().className).toEqual("btn btn-primary")
  })

  it('should not render import button', () => {
    props.entitlements['Import'] = null

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilityImportButton').length).toEqual(0)
  })

  it('should handle import button on click', () => {
    props.entitlements['Import'] = 0
    props.ui.importButtonIsVisible = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    subject.find('#vulnerabilityImportButton').simulate('click')
    expect(props.actions.handleImportClick).toHaveBeenCalled()
  })

  it('should render import form hidden when props.ui.importFormIsVisible equals false', () => {
    props.entitlements['Import'] = 0
    props.ui.importFormIsVisible = false

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilityImportForm').props().className).toEqual("form-inline hidden")
  })

  it('should render import form visible when props.ui.importFormIsVisible equals true', () => {
    props.entitlements['Import'] = 0
    props.ui.importFormIsVisible = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilityImportForm').props().className).toEqual("form-inline")
  })

  it('should handle import form phase select on change', () => {
    props.entitlements['Import'] = 0
    props.ui.importFormIsVisible = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    const event = {
      target: {
        value: 'test'
      }
    }
    subject.find('#import-phase-select').simulate('change', event)
    expect(props.actions.handleImportPhaseChange).toHaveBeenCalledWith('test')
  })

  it('should bind import form phase select value from props.importForm.phaseId', () => {
    props.entitlements['Import'] = 0
    props.ui.importFormIsVisible = true
    props.importForm['phaseId'] = 'selectedPhaseId'

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#import-phase-select').props().value).toEqual('selectedPhaseId')
  })

  it('should render import form phase select options by mapping props.phaseList', () => {
    props.entitlements['Import'] = 0
    props.ui.importFormIsVisible = true
    props.phaseList = [{ Id: 'id', Name: 'name' }]

    let subject = shallow(<VulnerabilityGrid {...props} />)
    let element = subject.find('#import-phase-select option')
    expect(element.at(0).props().value).toEqual("")
    expect(element.at(0).text()).toEqual("Select")
    expect(element.at(1).key()).toEqual("0")
    expect(element.at(1).props().value).toEqual("id")
    expect(element.at(1).text()).toEqual("name")
  })

  it('should handle import form file input on change', () => {
    props.entitlements['Import'] = 0
    props.ui.importFormIsVisible = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    const event = {
      target: {
        files: ['file data']
      }
    }
    subject.find('#import-file-input').simulate('change', event)
    expect(props.actions.handleImportFileChange).toHaveBeenCalledWith('file data')
  })

  it('should handle import form save button on click', () => {
    props.entitlements['Import'] = 0
    props.ui.importFormIsVisible = true
    props.engagementId = 'engagementId'
    props.importForm = 'importForm'

    let subject = shallow(<VulnerabilityGrid {...props} />)
    subject.find('#vulnerabilityImportSaveButton').simulate('click')
    expect(props.actions.handleImportSave).toHaveBeenCalledWith('engagementId', 'importForm')
  })

  it('should handle import form cancel button on click', () => {
    props.entitlements['Import'] = 0
    props.ui.importFormIsVisible = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    subject.find('#vulnerabilityImportCancelButton').simulate('click')
    expect(props.actions.handleImportCancel).toHaveBeenCalled()
  })

  it('should render import form processing spinner visible when props.ui.importProcessing equals true', () => {
    props.entitlements['Import'] = 0
    props.ui.importProcessing = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#import-processing-span').props().className).toEqual("help-block")
  })

  it('should render import form processing spinner hidden when props.ui.importProcessing equals false', () => {
    props.entitlements['Import'] = 0
    props.ui.importProcessing = false

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#import-processing-span').props().className).toEqual("help-block hidden")
  })

  it('should render import form summary div visible when props.ui.importSummaryIsVisible equals true', () => {
    props.entitlements['Import'] = 0
    props.ui.importSummaryIsVisible = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#import-summary-div').props().className).toEqual("")
  })

  it('should render import form summary div hidden when props.ui.importSummaryIsVisible equals false', () => {
    props.entitlements['Import'] = 0
    props.ui.importSummaryIsVisible = false

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#import-summary-div').props().className).toEqual("hidden")
  })

  it('should handle import form summary close button on click', () => {
    props.entitlements['Import'] = 0
    props.ui.importSummaryIsVisible = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    subject.find('#vulnerabilityImportSummaryCloseButton').simulate('click')
    expect(props.actions.handleImportSummaryClose).toHaveBeenCalled()
  })

  it('should pass titles to column headers', () => {
    props.ui.importSummaryIsVisible = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    let headers = subject.find(SortableHeader)
    let titles = headers.map(h => h.props().title)
    expect(titles).toEqual(
      [
        'Title',
        'Phase',
        'Severity',
        'Category',
        'Risk',
        'Resource',
        'Remediation',
        'Hosts'
      ]
    )
  })

  it('should pass sort objects to headers', () => {
    props.sort = {
      Title: { direction: 'desc', comparator: () => 0 },
      Phase: { direction: 'desc', comparator: () => 0 },
      CVSSScore: { direction: 'desc', comparator: () => 0 },
      VulnerabilityCategory: { direction: 'desc', comparator: () => 0 },
      Risk: { direction: 'desc', comparator: () => 0 },
      RemediationResource: { direction: 'desc', comparator: () => 0 },
      MitigationDate: { direction: 'desc', comparator: () => 0 },
      HostList: { direction: 'desc', comparator: () => 0 }
    }
    let subject = shallow(<VulnerabilityGrid {...props} />)
    let headers = subject.find(SortableHeader)
    headers.forEach(header => {
      expect(header.props().sort.direction).toEqual('desc')
    })
  })

  it('should pass sort handleSort to sort headers', () => {
    let subject = shallow(<VulnerabilityGrid {...props} />)
    let headers = subject.find(SortableHeader)
    headers.forEach(header => {
      header.props().onClick()
    })
    expect(props.actions.handleSort).toHaveBeenCalledTimes(8)
  })

  it('should pass handleFilter to filter headers', () => {
    let subject = shallow(<VulnerabilityGrid {...props} />)

    let selectHeader = subject.find(ThreatLevelFilterHeader)
    selectHeader.forEach(header => {
      header.props().onChange({ target: { value: 1 } })
    })

    let headers = subject.find(TextFilterHeader)
    headers.forEach(header => {
      header.props().onChange({ target: { value: 1 } })
    })
    expect(props.actions.handleFilter).toHaveBeenCalledTimes(8)
  })

  it('should render tbody Row', () => {
    props.rows = [
      { Id: '7', title: 'row0', phase: 'phase0' }
    ]
    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find(IconLinkCell).props().item).toEqual(props.rows[0])
    const textCells = subject.find(TextCell)
    const expected = [
      'Phase',
      'Severity',
      'VulnerabilityCategory',
      'Risk',
      'RemediationResource',
      'MitigationDate',
      'HostList'
    ]
    Array.from(textCells).forEach((cell, index) => {
      expect(cell.props.col.field).toEqual(expected[index])
    })
  })

  it('should render a Pager component, passing required props along', () => {
    let subject = shallow(<VulnerabilityGrid {...props} />)

    expect(subject.find(Pager).props().pageSize).toEqual(10)
    expect(subject.find(Pager).props().totalRowCount).toEqual(props.rows.length)
    expect(subject.find(Pager).props().currentPageIndex).toEqual(0)
    expect(subject.find(Pager).props().handlePageSize).toBeInstanceOf(Function)
    expect(subject.find(Pager).props().handlePageChange).toBeInstanceOf(Function)
  })

  it('should handle checkbox header on change', () => {
    let subject = shallow(<VulnerabilityGrid {...props} />)

    let element = subject.find(CheckboxHeader)
    let event = {
      target: {
        checked: 'Checked'
      }
    }
    element.simulate('change', event)

    expect(props.actions.handleSelectAll).toHaveBeenCalledWith('Checked', props.rows)
  })

  it('should render checkbox header checked true', () => {
    props.rows = [
      { Id: 'a' },
      { Id: 'b' }
    ]
    props.selectedRows = {
      a: true,
      b: true
    }
    let subject = shallow(<VulnerabilityGrid {...props} />)

    let element = subject.find(CheckboxHeader)

    expect(element.props().checked).toEqual(true)
  })

  it('should render checkbox header checked false', () => {
    props.rows = [
      { Id: 'a' },
      { Id: 'b' }
    ]
    props.selectedRows = {
      a: true,
      b: false
    }
    let subject = shallow(<VulnerabilityGrid {...props} />)

    let element = subject.find(CheckboxHeader)

    expect(element.props().checked).toEqual(false)
  })

  it('should handle checkbox cell on change', () => {
    props.rows = [
      { Id: 'id', }
    ]
    let subject = shallow(<VulnerabilityGrid {...props} />)

    let element = subject.find(CheckboxCell)
    let event = {
      target: {
        checked: 'Checked'
      }
    }
    element.simulate('change', event)

    expect(props.actions.handleSelectRow).toHaveBeenCalledWith('Checked', 'id', props.rows)
  })

  it('should render checkbox cell checked', () => {
    props.rows = [
      { Id: 'id' }
    ]
    props.selectedRows = {
      'id': true
    }
    let subject = shallow(<VulnerabilityGrid {...props} />)

    let element = subject.find(CheckboxCell)

    expect(element.props().checked).toEqual(true)
  })

  it('should only render selected item actions dropdown when items are selected', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: false }
    props.entitlements['Assign'] = 0

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilitySelectedItemActionsDiv').exists()).toEqual(false)
  })

  it('should handle selected item actions dropdown button on click', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    props.ui.selectedItemActionsDropdownIsOpen = false

    let subject = shallow(<VulnerabilityGrid {...props} />)
    subject.find('#vulnerabilitySelectedItemActionsButton').simulate('click')
    expect(props.actions.handleSelectedItemActionsDropdownClick).toHaveBeenCalled()
  })

  it('should render selected item actions dropdown menu closed when props.ui.selectedItemActionsDropdownIsOpen equals false', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    props.ui.selectedItemActionsDropdownIsOpen = false

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilitySelectedItemActionsDiv').props().className).toEqual('btn-group btn-group-actions')
  })

  it('should render selected item actions dropdown menu hidden when props.ui.assignRiskFormIsVisible equals true', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    props.ui.assignRiskFormIsVisible = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilitySelectedItemActionsDiv').props().className).toEqual('btn-group btn-group-actions hidden')
  })

  it('should render selected item actions dropdown menu visible when props.ui.assignRiskFormIsVisible equals false', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    props.ui.assignRiskFormIsVisible = false

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilitySelectedItemActionsDiv').props().className).toEqual('btn-group btn-group-actions')
  })

  it('should render selected item actions dropdown menu open when props.ui.selectedItemActionsDropdownIsOpen equals true', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    props.ui.selectedItemActionsDropdownIsOpen = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilitySelectedItemActionsDiv').props().className).toEqual('btn-group btn-group-actions open')

    let dropdown = subject.find('.btn-group-actions ul.dropdown-menu')
    expect(dropdown.find('a.cursor-pointer').at(0).text()).toEqual('Clear Selected')
    expect(dropdown.find('a.cursor-pointer').at(1).text()).toEqual('Create a New Risk')
    expect(dropdown.find('a.cursor-pointer').at(2).text()).toEqual('Assign to Existing')
  })

  it('should handle selected item actions dropdown menu on mouse leave', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    props.ui.selectedItemActionsDropdownIsOpen = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    subject.find('.btn-group-actions ul.dropdown-menu').simulate('mouseleave')
    expect(props.actions.handleSelectedItemActionsDropdownMouseLeave).toHaveBeenCalled()
  })

  it('should handle selected item actions dropdown menu clear all option on click', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    let subject = shallow(<VulnerabilityGrid {...props} />)

    let element = subject.find('#vulnerabilitySelectedItemsClear')
    element.simulate('click')

    expect(props.actions.handleSelectedItemActionsClear).toHaveBeenCalled()
  })

  it('should handle selected item actions dropdown menu create new risk option on click', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.history = 'history'
    props.entitlements['Assign'] = 0
    let subject = shallow(<VulnerabilityGrid {...props} />)

    let element = subject.find('#vulnerabilitySelectedItemsCreateRisk')
    element.simulate('click')

    expect(props.actions.handleSelectedItemActionsCreate).toHaveBeenCalledWith(props.rows, 'history', 'engagementId')
    expect()
  })

  it('should handle selected item actions dropdown menu assign to existing option on click', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    let subject = shallow(<VulnerabilityGrid {...props} />)

    let element = subject.find('#vulnerabilitySelectedItemsAssignRisk')
    element.simulate('click')

    expect(props.actions.handleSelectedItemActionsAssign).toHaveBeenCalledWith('engagementId')
    expect()
  })

  it('should not render item actions dropdown', () => {
    props.entitlements['Assign'] = null

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilitySelectedItemActionsDiv').length).toEqual(0)
  })


  it('should render assign risk form hidden when props.ui.assignRiskFormIsVisible equals false', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    props.ui.assignRiskFormIsVisible = false

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilityAssignRiskForm').props().className).toEqual("form-inline hidden")
  })

  it('should render assign risk form visible when props.ui.assignRiskFormIsVisible equals true', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    props.ui.assignRiskFormIsVisible = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#vulnerabilityAssignRiskForm').props().className).toEqual("form-inline")
  })

  it('should handle assign risk form risk select on change', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    props.ui.assignRiskFormIsVisible = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    const event = {
      target: {
        value: 'test'
      }
    }
    subject.find('#assign-risk-select').simulate('change', event)
    expect(props.actions.handleAssignRiskChange).toHaveBeenCalledWith('test')
  })

  it('should bind assign risk form risk select value from props.assignForm.riskId', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    props.ui.assignRiskFormIsVisible = true
    props.assignForm['riskId'] = 'selectedRiskId'

    let subject = shallow(<VulnerabilityGrid {...props} />)
    expect(subject.find('#assign-risk-select').props().value).toEqual('selectedRiskId')
  })

  it('should render assign risk form risk select options by mapping props.riskList', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    props.ui.assignRiskFormIsVisible = true
    props.riskList = {
      phase: [{ Id: 'id', Name: 'name' }]
    }

    let subject = shallow(<VulnerabilityGrid {...props} />)
    let optgroup = subject.find('#assign-risk-select optgroup')
    expect(optgroup.props().label).toEqual("phase")
    expect(optgroup.key()).toEqual("0")
    let option = optgroup.find("option")
    expect(option.props().value).toEqual("id")
    expect(option.text()).toEqual("name")
  })

  it('should handle assign risk form assign button on click', () => {
    props.rows = [{ Id: 'a', Phase: 'phase' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    props.ui.assignRiskFormIsVisible = true
    props.engagementId = 'engagementId'
    props.assignForm = 'assignForm'
    props.riskList = {
      phase: [{ Id: 'id', Name: 'name' }]
    }

    let subject = shallow(<VulnerabilityGrid {...props} />)
    subject.find('#vulnerabilityAssignRiskSaveButton').simulate('click')
    expect(props.actions.handleAssignRiskSave).toHaveBeenCalledWith(props.assignForm, props.riskList, props.rows)
  })

  it('should handle assign risk form cancel button on click', () => {
    props.rows = [{ Id: 'a' }]
    props.selectedRows = { a: true }
    props.entitlements['Assign'] = 0
    props.ui.assignRiskFormIsVisible = true

    let subject = shallow(<VulnerabilityGrid {...props} />)
    subject.find('#vulnerabilityAssignRiskCancelButton').simulate('click')
    expect(props.actions.handleAssignRiskCancel).toHaveBeenCalled()
  })

  it('should render vulnerabilities chart', () => {
    let subject = shallow(<VulnerabilityGrid {...props} />).find(ColumnChart)
    expect(subject.props().id).toEqual("vulnerabilities-chart")
    expect(subject.props().title).toEqual("Vulnerabilities by Category")
    expect(subject.props().subtitle).toEqual("Click the columns to apply category and severity filter below")
    expect(subject.props().className).toEqual("col-md-12")
    expect(subject.props().height).toEqual("300")
    expect(subject.props().yTitle).toEqual("Vulnerabilities")
    expect(subject.props().chart.value).toEqual("chart")
  })

  it('should handle vulnerabilities chart onClick', () => {
    let subject = shallow(<VulnerabilityGrid {...props} />).find(ColumnChart)
    let event = {
      point: {
        name: "category",
        series: {
          name: "severity"
        },
      }
    }

    subject.props().onClick(event)
    expect(props.actions.handleFilter)
      .toHaveBeenCalledWith("Severity", "severity", equalsFilter)
    expect(props.actions.handleFilter)
      .toHaveBeenCalledWith("VulnerabilityCategory", "category", equalsFilter)
  })

  it('should render Threat Level Filter Headers', () => {
    const subject = shallow(<VulnerabilityGrid {...props} />)

    const filterHeaders = subject.find(ThreatLevelFilterHeader)
    expect(filterHeaders).toHaveLength(1)
  })
  */

})
