import React from 'react'
import { createStore } from 'redux'
import { shallow } from 'enzyme'
import VulnerabilityDetailContainer from './vulnerability-detail-container'
import * as actions from './vulnerability-actions'


describe("Vulnerability Detail Container", () => {
  let state

  beforeEach(() => {
    state = {
      branding: {
        selectedEngagement: 'engagementId',
      },
      vulnerabilityDetail: 'vulnerabilityDetail',
      ui: {
        vulnerabilityDetail: 'ui.vulnerabilityDetail'
      },
      session: {
        entitlements: {
          list: {
            vulnerabilityRoles: 'entitlements',
            hostRoles: 'entitlementsHost'
          }
        }
      }
    }
  })

  it('should map state to props', () => {
    let store = createStore(s => s, state)
    let subject = shallow(<VulnerabilityDetailContainer store={store} />)

    expect(subject.props().engagementId).toEqual('engagementId')
    expect(subject.props().ui).toEqual('ui.vulnerabilityDetail')
    expect(subject.props().entitlements).toEqual('entitlements')
    expect(subject.props().entitlementsHost).toEqual('entitlementsHost')
    expect(subject.props().vulnerability).toEqual('vulnerabilityDetail')
  })

  it('should map state to props with undefined entitlements', () => {
    state.session.entitlements.list = {}
    let store = createStore(s => s, state)
    let subject = shallow(<VulnerabilityDetailContainer store={store} />)

    expect(subject.props().entitlements).toEqual({})
    expect(subject.props().entitlementsHost).toEqual({})
  })

  it('should map dispatch to props', () => {
    let store = createStore(s => s, state)
    let subject = shallow(<VulnerabilityDetailContainer store={store} />)

    expect(subject.props().actions.handlePhaseChange).toBeDefined()
    expect(subject.props().actions.handleMitigationDateChange).toBeDefined()
    expect(subject.props().actions.handleMitigationDateSelected).toBeDefined()
    expect(subject.props().actions.handleTargetRemediationDateChange).toBeDefined()
    expect(subject.props().actions.handleTargetRemediationDateSelected).toBeDefined()
    expect(subject.props().actions.handleTargetRemediationDateClose).toBeDefined()
    expect(subject.props().actions.onTargetRemediationDateButtonClick).toBeDefined()    
    expect(subject.props().actions.onRemediationStatusChange).toBeDefined()
    expect(subject.props().actions.onResourceChange).toBeDefined()
    expect(subject.props().actions.onDateButtonClick).toBeDefined()
    expect(subject.props().actions.update).toBeDefined()
    expect(subject.props().actions.handleRemediationDateClose).toBeDefined()
    expect(subject.props().actions.handleHostsSort).toBeDefined()
    expect(subject.props().actions.handleHostsFilter).toBeDefined()
    expect(subject.props().actions.handleHostsPageSizeChange).toBeDefined()
    expect(subject.props().actions.handleHostsPageIndexChange).toBeDefined()
    expect(subject.props().willMount).toBeDefined()
  })

  it('should pass props to actions.get', () => {
    let store = createStore(s => s, state)
    let subject = shallow(<VulnerabilityDetailContainer store={store} />)

    const returnMock = jest.fn()
    actions.get = jest.fn().mockReturnValue(returnMock)
    subject.props().willMount(
      {
        engagementId: 'mockEngagementId',
        match: {
          params: {
            vulnerabilityId: 'mockVulnerabilityId'
          }
        }
      }
    )
    expect(actions.get).toHaveBeenCalledWith(store.dispatch)
    expect(returnMock).toHaveBeenCalledWith('mockEngagementId', 'mockVulnerabilityId')
  })
})
