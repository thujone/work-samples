import * as types from './vulnerability-action-types'
import * as actions from '../actions/api'
import reducer from './vulnerability-detail-reducer'

describe('Vulnerability Detail Reducer', () => {

  it('should handle VULN_GET_SUCCESS', () => {
    const action = {
      type: types.VULN_GET_SUCCESS,
      payload: { data: "value" }
    }
    const initState = {
    }
    const expectedState = {
      data: "value",
      currentPageIndex: 0,
      filters: {},
      sort: {}
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_POST_FETCHING', () => {
    const action = {
      type: types.VULN_POST_FETCHING
    }
    const initState = {
    }
    const expectedState = {
      IsFetching: true
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_POST_SUCCESS', () => {
    const action = {
      type: types.VULN_POST_SUCCESS
    }
    const initState = {
    }
    const expectedState = {
      IsFetching: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_POST_FAILED', () => {
    const action = {
      type: types.VULN_POST_FAILED
    }
    const initState = {
    }
    const expectedState = {
      IsFetching: false
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_RESOURCE_ASSIGN_SAVE: resource', () => {
    const action = {
      type: types.VULN_RESOURCE_ASSIGN_SAVE,
      resource: "1",
      group: undefined
    }
    const initState = {
      ResourceId: "",
      GroupId: ""
    }
    const expectedState = {
      ResourceId: "1",
      GroupId: undefined
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_RESOURCE_ASSIGN_SAVE: group', () => {
    const action = {
      type: types.VULN_RESOURCE_ASSIGN_SAVE,
      resource: undefined,
      group: "1"
    }
    const initState = {
      ResourceId: "",
      GroupId: ""
    }
    const expectedState = {
      ResourceId: undefined,
      GroupId: "1"
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_CHANGE_PHASE', () => {
    const action = {
      type: types.VULN_CHANGE_PHASE,
      value: "val"
    }
    const initState = {
      PhaseId: "id"
    }
    const expectedState = {
      PhaseId: "val"
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECT_MITIGATION_DATE', () => {
    const action = {
      type: types.VULN_SELECT_MITIGATION_DATE,
      value: "val"
    }
    const initState = {
      MitigationDate: ""
    }
    const expectedState = {
      MitigationDate: "val"
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_CHANGE_MITIGATION_DATE', () => {
    const action = {
      type: types.VULN_CHANGE_MITIGATION_DATE,
      value: "date"
    }
    const initState = {
      MitigationDate: "cc"
    }
    const expectedState = {
      MitigationDate: "date"
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_SELECT_TARGET_REMEDIATION_DATE', () => {
    const action = {
      type: types.VULN_SELECT_TARGET_REMEDIATION_DATE,
      value: "val"
    }
    const initState = {
      TargetRemediationDate: ""
    }
    const expectedState = {
      TargetRemediationDate: "val"
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_CHANGE_TARGET_REMEDIATION_DATE', () => {
    const action = {
      type: types.VULN_CHANGE_TARGET_REMEDIATION_DATE,
      value: "date"
    }
    const initState = {
      TargetRemediationDate: "cc"
    }
    const expectedState = {
      TargetRemediationDate: "date"
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_REMEDIATION_STATUS_CHANGE', () => {
    const action = {
      type: types.VULN_REMEDIATION_STATUS_CHANGE,
      value:"ds"
    }
    const initState = {
      RemediationStatusId:""
    }
    const expectedState = {
      RemediationStatusId:"ds"
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_HOSTS_SORT add field asc as only sort field', () => {
    const action = {
      type: types.VULN_HOSTS_SORT,
      field: "FieldName",
      comparator: "Comparator"
    }
    const initState = {
      currentPageIndex: 10,
      sort: {
        OtherName: {
          direction: "asc"
        }
      }
    }
    const expectedState = {
      currentPageIndex: 0,
      sort: {
        FieldName: {
          comparator: "Comparator",
          direction: "asc"
        }
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_HOSTS_SORT toggle field to asc', () => {
    const action = {
      type: types.VULN_HOSTS_SORT,
      field: "FieldName",
      comparator: "Comparator"
    }
    const initState = {
      currentPageIndex: 10,
      sort: {
        FieldName: {
          direction: "desc"
        }
      }
    }
    const expectedState = {
      currentPageIndex: 0,
      sort: {
        FieldName: {
          comparator: "Comparator",
          direction: "asc"
        }
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_HOSTS_SORT toggle field to desc', () => {
    const action = {
      type: types.VULN_HOSTS_SORT,
      field: "FieldName",
      comparator: "Comparator"
    }
    const initState = {
      currentPageIndex: 10,
      sort: {
        FieldName: {
          direction: "asc"
        }
      }
    }
    const expectedState = {
      currentPageIndex: 0,
      sort: {
        FieldName: {
          comparator: "Comparator",
          direction: "desc"
        }
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_HOSTS_FILTER update field filter value', () => {
    const action = {
      type: types.VULN_HOSTS_FILTER,
      field: "FieldName",
      value: "Value",
      filter: "Filter"
    }
    const initState = {
      currentPageIndex: 10,
      filters: {
        OtherField: {
          value: "a",
          filter: "b"
        },
        FieldName: {
          value: "",
          filter: ""
        }
      }
    }
    const expectedState = {
      currentPageIndex: 0,
      filters: {
        OtherField: {
          value: "a",
          filter: "b"
        },
        FieldName: {
          value: "Value",
          filter: "Filter"
        }
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_HOSTS_FILTER remove field filter when value empty', () => {
    const action = {
      type: types.VULN_HOSTS_FILTER,
      field: "FieldName",
      value: "",
      filter: "Filter"
    }
    const initState = {
      currentPageIndex: 10,
      filters: {
        OtherField: {
          value: "a",
          filter: "b"
        },
        FieldName: {
          value: "",
          filter: ""
        }
      }
    }
    const expectedState = {
      currentPageIndex: 0,
      filters: {
        OtherField: {
          value: "a",
          filter: "b"
        }
      }
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_HOSTS_PAGE_SIZE_CHANGE', () => {
    const action = {
      type: types.VULN_HOSTS_PAGE_SIZE_CHANGE,
      size: 5
    }
    const initState = {
      pageSize: 10
    }
    const expectedState = {
      pageSize: 5
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })

  it('should handle VULN_HOSTS_PAGE_INDEX_CHANGE', () => {
    const action = {
      type: types.VULN_HOSTS_PAGE_INDEX_CHANGE,
      index: 5
    }
    const initState = {
      currentPageIndex: 10
    }
    const expectedState = {
      currentPageIndex: 5
    }
    expect(reducer(initState, action)).toEqual(expectedState)
  })
})