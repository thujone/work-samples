import { connect } from 'react-redux'
import { createSelector } from 'reselect'
import wrapper from '../components/will-mount-wrapper'
import VulnerabilityDetail from './vulnerability-detail'
import * as actions from './vulnerability-actions'

const entitySelector = (state) => state.vulnerabilityDetail
const uiEntitySelector = (state) => state.ui.vulnerabilityDetail

export const vulnerabilitySelector = createSelector(
  entitySelector,
  entity => entity
)

export const uiSelector = createSelector(
  uiEntitySelector,
  ui => ui
)

const mapStateToProps = state => ({
  engagementId: state.branding.selectedEngagement,
  vulnerability: vulnerabilitySelector(state),
  entitlements: state.session.entitlements.list['vulnerabilityRoles'] || {},
  entitlementsHost: state.session.entitlements.list['hostRoles'] || {},
  ui: uiSelector(state),
  vulnerabilityDetail: state.vulnerabilityDetail,
  showHistory: state.ui.table.vulnerability.showHistory
})

const mapDispatchToProps = dispatch => {
  return {
    actions: {
      handlePhaseChange: actions.handlePhaseChange(dispatch),
      handleRemediatedDateChange: actions.handleRemediatedDateChange(dispatch),
      handleRemediatedDateSelected: actions.handleRemediatedDateSelected(dispatch),
      handleRemediatedDateBlur: actions.handleRemediatedDateBlur(dispatch),
      handleRemediatedDateClose: actions.handleRemediatedDateClose(dispatch),
      handleRemediatedDateClick: actions.handleRemediatedDateClick(dispatch),
      handleRemediationStatusChange:  actions.handleRemediationStatusChange(dispatch),
      handleTargetRemediationDateChange: actions.handleTargetRemediationDateChange(dispatch),
      handleTargetRemediationDateSelected: actions.handleTargetRemediationDateSelected(dispatch),
      handleTargetRemediationDateClose: actions.handleTargetRemediationDateClose(dispatch),
      handleTargetRemediationDateBlur: actions.handleTargetRemediationDateBlur(dispatch),
      onResourceChange: actions.assignResource(dispatch),
      onTargetRemediationDateButtonClick: actions.handleTargetRemediationDateClick(dispatch),
      update: actions.update(dispatch),
      handleHostsSort: actions.handleHostsSort(dispatch),
      handleHostsFilter: actions.handleHostsFilter(dispatch),
      handleHostsPageSizeChange: actions.handleHostsPageSizeChange(dispatch),
      handleHostsPageIndexChange: actions.handleHostsPageIndexChange(dispatch),
      handleHistoryButtonToggle: actions.handleHistoryButtonToggle(dispatch)
    },
    willMount: props => {
      let params = props.match.params
      actions.get(dispatch)(props.engagementId, params.phaseId, params.vulnerabilityId)
    }
  }
}

const mergeProps = (stateProps, dispatchProps, ownProps) =>
  Object.assign({}, stateProps, dispatchProps, ownProps)

export const VulnerabilityDetailContainer = connect(mapStateToProps, mapDispatchToProps, mergeProps)(wrapper(VulnerabilityDetail))

export default VulnerabilityDetailContainer