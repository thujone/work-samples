 import * as types from './vulnerability-action-types'

export const initState = {
  currentPageIndex: 0,
  pageSize: 10,
  filters: {},
  sort: {},
  showHistory: false,
  allHosts: [],
  activeHosts: [],
  isFetching: false,
  Id: '',
  EngagementId: '',
  PhaseId: '',
  Phase: '',
  VulnerabilityCategoryId: '',
  ResourceId: '',
  GroupId: '',
  Title: '',
  CVSSScore: '',
  Description: '',
  Remedy: '',
  CVEList: [],
  ExploitAvailable: false,
  ExploitList: [],
  References: [],
  Port: '',
  Service: '',
  ScanDetails: '',
  PatchDate: '',
  VulnerabilityDate: '',
  ImportedBy: '',
  ImportedDate: '',
  RemediationStatus: '',
  RemediationStatusId: '',
  MitigationDate: '',
  HostList: [],
  MitigationStatusList: [],
  Risk: '',
  RiskList: [],
  PhaseList:[],
  GroupList: [],
  ResourceList: [],
  VulnerabilityCategory: '',
  Severity: '',
  AssessmentDate: '',
  TargetRemediationDate: ''
}

const vulnerabilityDetailReducer = (state = initState, action) => {
  switch (action.type) {
    case types.VULN_GET_FETCHING:
      return {
        ...state,
        data: [],
        filters: {},
        sort: {},
        isFetching: true,
      }
    case types.VULN_GET_FAILED:
      return {
        ...state,
        isFetching: false
      }
    case types.VULN_GET_SUCCESS:
      const allHosts = action.payload.HostList
      const activeHosts = allHosts.filter(host => !host.IsPartiallyRemediated)
      return {
        ...state,
        ...action.payload,
        currentPageIndex: 0,
        filters: {},
        sort: {},
        data: {},
        isFetching: false,
        allHosts: allHosts,
        activeHosts: activeHosts,
        showHistory: false,
        HostList: activeHosts
      }
    case types.VULN_POST_FETCHING:
      return {
        ...state,
        IsFetching: true
      }
    case types.VULN_POST_SUCCESS:
      return {
        ...state,
        IsFetching: false
      }
    case types.VULN_POST_FAILED:
      return {
        ...state,
        IsFetching: false
      }
    case types.VULN_HOSTS_SORT:
      let localSort = {}

      // toggle sort direction from asc to desc for field
      if (state.sort[action.field] && state.sort[action.field].direction === "asc") {
        localSort[action.field] = {
          direction: "desc",
          comparator: action.comparator
        }
      }
      else {
        // set sort direction asc for field
        localSort[action.field] = {
          direction: "asc",
          comparator: action.comparator
        }
      }

      return {
        ...state,
        sort: localSort,
        currentPageIndex: 0
      }
    case types.VULN_HOSTS_FILTER:
      const localFilters = {
        ...state.filters
      }

      // update field filter value only when not empty
      if (action.value && action.value !== "") {
        localFilters[action.field] = {
          value: action.value,
          filter: action.filter
        }
      } else {
        // remove field filter when empty
        delete localFilters[action.field]
      }

      return {
        ...state,
        filters: localFilters,
        currentPageIndex: 0
      }
    case types.VULN_HOSTS_PAGE_SIZE_CHANGE:
      return {
        ...state,
        pageSize: action.size
      }
    case types.VULN_HOSTS_PAGE_INDEX_CHANGE:
      return {
        ...state,
        currentPageIndex: action.index
      }
    case types.VULN_RESOURCE_ASSIGN_SAVE:
      return {
        ...state,
        ResourceId: action.resource,
        GroupId: action.group
      }
    case types.VULN_CHANGE_PHASE:
      return {
        ...state,
        PhaseId: action.value
      }
    case types.VULN_REMEDIATED_DATE_SELECTED:
    case types.VULN_REMEDIATED_DATE_CHANGE:
      return {
        ...state,
        MitigationDate: action.value
      }
    case types.VULN_SELECT_TARGET_REMEDIATION_DATE:
    case types.VULN_CHANGE_TARGET_REMEDIATION_DATE:
      return {
        ...state,
        TargetRemediationDate: action.value
      }
    case types.VULN_REMEDIATION_STATUS_CHANGE:
      return {
        ...state,
        RemediationStatusId: action.value
      }
    case types.VULN_DETAIL_HISTORY_BUTTON_TOGGLE:
      state.showHistory = !state.showHistory
      if (state.showHistory) {
        return {
          ...state,
          HostList: state.allHosts
        }
      } else {
        return {
          ...state,
          HostList: state.activeHosts
        }
      }
    default:
      return state
  }
}

export default vulnerabilityDetailReducer